/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package fr.inria.diverse.logo.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.inria.diverse.logo.xtext.ide.contentassist.antlr.internal.InternalLogoParser;
import fr.inria.diverse.logo.xtext.services.LogoGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LogoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LogoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LogoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getExtendedExpressionAccess().getAlternatives(), "rule__ExtendedExpression__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getControlStatementAccess().getAlternatives(), "rule__ControlStatement__Alternatives");
			builder.put(grammarAccess.getIfAccess().getAlternatives_1(), "rule__If__Alternatives_1");
			builder.put(grammarAccess.getIfElseAccess().getAlternatives_1(), "rule__IfElse__Alternatives_1");
			builder.put(grammarAccess.getWhileAccess().getAlternatives_1(), "rule__While__Alternatives_1");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getAlternatives_1_0(), "rule__EqualsGreaterLower__Alternatives_1_0");
			builder.put(grammarAccess.getPlusMinusAccess().getAlternatives_1_0_0(), "rule__PlusMinus__Alternatives_1_0_0");
			builder.put(grammarAccess.getMultDivAccess().getAlternatives_1_0(), "rule__MultDiv__Alternatives_1_0");
			builder.put(grammarAccess.getNotOppositeAccess().getAlternatives(), "rule__NotOpposite__Alternatives");
			builder.put(grammarAccess.getBoolValueAccess().getAlternatives_1(), "rule__BoolValue__Alternatives_1");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getRightAccess().getGroup(), "rule__Right__Group__0");
			builder.put(grammarAccess.getLeftAccess().getGroup(), "rule__Left__Group__0");
			builder.put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
			builder.put(grammarAccess.getPenDownAccess().getGroup(), "rule__PenDown__Group__0");
			builder.put(grammarAccess.getPenUpAccess().getGroup(), "rule__PenUp__Group__0");
			builder.put(grammarAccess.getProcedureDefinitionAccess().getGroup(), "rule__ProcedureDefinition__Group__0");
			builder.put(grammarAccess.getProcedureCallAccess().getGroup(), "rule__ProcedureCall__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_1_1(), "rule__If__Group_1_1__0");
			builder.put(grammarAccess.getIfElseAccess().getGroup(), "rule__IfElse__Group__0");
			builder.put(grammarAccess.getIfElseAccess().getGroup_1_1(), "rule__IfElse__Group_1_1__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_1(), "rule__While__Group_1_1__0");
			builder.put(grammarAccess.getRepeatAccess().getGroup(), "rule__Repeat__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_2(), "rule__And__Group_2__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_2(), "rule__Or__Group_2__0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getGroup(), "rule__EqualsGreaterLower__Group__0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1(), "rule__EqualsGreaterLower__Group_1__0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_0(), "rule__EqualsGreaterLower__Group_1_0_0__0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_1(), "rule__EqualsGreaterLower__Group_1_0_1__0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_2(), "rule__EqualsGreaterLower__Group_1_0_2__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1(), "rule__PlusMinus__Group_1__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0(), "rule__PlusMinus__Group_1_0__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_0(), "rule__PlusMinus__Group_1_0_0_0__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_1(), "rule__PlusMinus__Group_1_0_0_1__0");
			builder.put(grammarAccess.getMultDivAccess().getGroup(), "rule__MultDiv__Group__0");
			builder.put(grammarAccess.getMultDivAccess().getGroup_1(), "rule__MultDiv__Group_1__0");
			builder.put(grammarAccess.getMultDivAccess().getGroup_1_0_0(), "rule__MultDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMultDivAccess().getGroup_1_0_1(), "rule__MultDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getNotOppositeAccess().getGroup_2(), "rule__NotOpposite__Group_2__0");
			builder.put(grammarAccess.getNotOppositeAccess().getGroup_3(), "rule__NotOpposite__Group_3__0");
			builder.put(grammarAccess.getNotOppositeAccess().getGroup_4(), "rule__NotOpposite__Group_4__0");
			builder.put(grammarAccess.getVariableReadAccess().getGroup(), "rule__VariableRead__Group__0");
			builder.put(grammarAccess.getBoolValueAccess().getGroup(), "rule__BoolValue__Group__0");
			builder.put(grammarAccess.getLogoAccess().getStatementsAssignment(), "rule__Logo__StatementsAssignment");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getRightAccess().getAngleAssignment_1(), "rule__Right__AngleAssignment_1");
			builder.put(grammarAccess.getLeftAccess().getAngleAssignment_1(), "rule__Left__AngleAssignment_1");
			builder.put(grammarAccess.getForwardAccess().getStepAssignment_1(), "rule__Forward__StepAssignment_1");
			builder.put(grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1(), "rule__ProcedureDefinition__NameAssignment_1");
			builder.put(grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2(), "rule__ProcedureDefinition__ParametersAssignment_2");
			builder.put(grammarAccess.getProcedureDefinitionAccess().getStatementsAssignment_3(), "rule__ProcedureDefinition__StatementsAssignment_3");
			builder.put(grammarAccess.getProcedureCallAccess().getDefinitionAssignment_0(), "rule__ProcedureCall__DefinitionAssignment_0");
			builder.put(grammarAccess.getProcedureCallAccess().getParameterValuesAssignment_1(), "rule__ProcedureCall__ParameterValuesAssignment_1");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
			builder.put(grammarAccess.getIfAccess().getConditionAssignment_1_0(), "rule__If__ConditionAssignment_1_0");
			builder.put(grammarAccess.getIfAccess().getConditionAssignment_1_1_1(), "rule__If__ConditionAssignment_1_1_1");
			builder.put(grammarAccess.getIfAccess().getIfBlockAssignment_2(), "rule__If__IfBlockAssignment_2");
			builder.put(grammarAccess.getIfElseAccess().getConditionAssignment_1_0(), "rule__IfElse__ConditionAssignment_1_0");
			builder.put(grammarAccess.getIfElseAccess().getConditionAssignment_1_1_1(), "rule__IfElse__ConditionAssignment_1_1_1");
			builder.put(grammarAccess.getIfElseAccess().getIfBlockAssignment_2(), "rule__IfElse__IfBlockAssignment_2");
			builder.put(grammarAccess.getIfElseAccess().getElseBlockAssignment_3(), "rule__IfElse__ElseBlockAssignment_3");
			builder.put(grammarAccess.getWhileAccess().getConditionAssignment_1_0(), "rule__While__ConditionAssignment_1_0");
			builder.put(grammarAccess.getWhileAccess().getConditionAssignment_1_1_1(), "rule__While__ConditionAssignment_1_1_1");
			builder.put(grammarAccess.getWhileAccess().getBlockAssignment_2(), "rule__While__BlockAssignment_2");
			builder.put(grammarAccess.getRepeatAccess().getConditionAssignment_1(), "rule__Repeat__ConditionAssignment_1");
			builder.put(grammarAccess.getRepeatAccess().getBlockAssignment_2(), "rule__Repeat__BlockAssignment_2");
			builder.put(grammarAccess.getAndAccess().getExpressionsAssignment_1(), "rule__And__ExpressionsAssignment_1");
			builder.put(grammarAccess.getAndAccess().getExpressionsAssignment_2_0(), "rule__And__ExpressionsAssignment_2_0");
			builder.put(grammarAccess.getOrAccess().getExpressionsAssignment_1(), "rule__Or__ExpressionsAssignment_1");
			builder.put(grammarAccess.getOrAccess().getExpressionsAssignment_2_0(), "rule__Or__ExpressionsAssignment_2_0");
			builder.put(grammarAccess.getEqualsGreaterLowerAccess().getRightExpressionAssignment_1_1(), "rule__EqualsGreaterLower__RightExpressionAssignment_1_1");
			builder.put(grammarAccess.getPlusMinusAccess().getRightExpressionAssignment_1_0_1(), "rule__PlusMinus__RightExpressionAssignment_1_0_1");
			builder.put(grammarAccess.getMultDivAccess().getRightExpressionAssignment_1_1(), "rule__MultDiv__RightExpressionAssignment_1_1");
			builder.put(grammarAccess.getNotOppositeAccess().getExpressionAssignment_3_2(), "rule__NotOpposite__ExpressionAssignment_3_2");
			builder.put(grammarAccess.getNotOppositeAccess().getExpressionAssignment_4_2(), "rule__NotOpposite__ExpressionAssignment_4_2");
			builder.put(grammarAccess.getVariableReadAccess().getNameAssignment_1(), "rule__VariableRead__NameAssignment_1");
			builder.put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
			builder.put(grammarAccess.getBoolValueAccess().getValueAssignment_1_0(), "rule__BoolValue__ValueAssignment_1_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LogoGrammarAccess grammarAccess;

	@Override
	protected InternalLogoParser createParser() {
		InternalLogoParser result = new InternalLogoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LogoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LogoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
