/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
grammar InternalLogo;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package fr.inria.diverse.logo.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.diverse.logo.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.inria.diverse.logo.xtext.services.LogoGrammarAccess;

}
@parser::members {
	private LogoGrammarAccess grammarAccess;

	public void setGrammarAccess(LogoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleLogo
entryRuleLogo
:
{ before(grammarAccess.getLogoRule()); }
	 ruleLogo
{ after(grammarAccess.getLogoRule()); } 
	 EOF 
;

// Rule Logo
ruleLogo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getLogoAccess().getStatementsAssignment()); }
			(rule__Logo__StatementsAssignment)
			{ after(grammarAccess.getLogoAccess().getStatementsAssignment()); }
		)
		(
			{ before(grammarAccess.getLogoAccess().getStatementsAssignment()); }
			(rule__Logo__StatementsAssignment)*
			{ after(grammarAccess.getLogoAccess().getStatementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtendedExpression
entryRuleExtendedExpression
:
{ before(grammarAccess.getExtendedExpressionRule()); }
	 ruleExtendedExpression
{ after(grammarAccess.getExtendedExpressionRule()); } 
	 EOF 
;

// Rule ExtendedExpression
ruleExtendedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtendedExpressionAccess().getAlternatives()); }
		(rule__ExtendedExpression__Alternatives)
		{ after(grammarAccess.getExtendedExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForward
entryRuleForward
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardAccess().getGroup()); }
		(rule__Forward__Group__0)
		{ after(grammarAccess.getForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePenDown
entryRulePenDown
:
{ before(grammarAccess.getPenDownRule()); }
	 rulePenDown
{ after(grammarAccess.getPenDownRule()); } 
	 EOF 
;

// Rule PenDown
rulePenDown 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPenDownAccess().getGroup()); }
		(rule__PenDown__Group__0)
		{ after(grammarAccess.getPenDownAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePenUp
entryRulePenUp
:
{ before(grammarAccess.getPenUpRule()); }
	 rulePenUp
{ after(grammarAccess.getPenUpRule()); } 
	 EOF 
;

// Rule PenUp
rulePenUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPenUpAccess().getGroup()); }
		(rule__PenUp__Group__0)
		{ after(grammarAccess.getPenUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureDefinition
entryRuleProcedureDefinition
:
{ before(grammarAccess.getProcedureDefinitionRule()); }
	 ruleProcedureDefinition
{ after(grammarAccess.getProcedureDefinitionRule()); } 
	 EOF 
;

// Rule ProcedureDefinition
ruleProcedureDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getGroup()); }
		(rule__ProcedureDefinition__Group__0)
		{ after(grammarAccess.getProcedureDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureCall
entryRuleProcedureCall
:
{ before(grammarAccess.getProcedureCallRule()); }
	 ruleProcedureCall
{ after(grammarAccess.getProcedureCallRule()); } 
	 EOF 
;

// Rule ProcedureCall
ruleProcedureCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureCallAccess().getGroup()); }
		(rule__ProcedureCall__Group__0)
		{ after(grammarAccess.getProcedureCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleControlStatement
entryRuleControlStatement
:
{ before(grammarAccess.getControlStatementRule()); }
	 ruleControlStatement
{ after(grammarAccess.getControlStatementRule()); } 
	 EOF 
;

// Rule ControlStatement
ruleControlStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getControlStatementAccess().getAlternatives()); }
		(rule__ControlStatement__Alternatives)
		{ after(grammarAccess.getControlStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElse
entryRuleIfElse
:
{ before(grammarAccess.getIfElseRule()); }
	 ruleIfElse
{ after(grammarAccess.getIfElseRule()); } 
	 EOF 
;

// Rule IfElse
ruleIfElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseAccess().getGroup()); }
		(rule__IfElse__Group__0)
		{ after(grammarAccess.getIfElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeat
entryRuleRepeat
:
{ before(grammarAccess.getRepeatRule()); }
	 ruleRepeat
{ after(grammarAccess.getRepeatRule()); } 
	 EOF 
;

// Rule Repeat
ruleRepeat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatAccess().getGroup()); }
		(rule__Repeat__Group__0)
		{ after(grammarAccess.getRepeatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualsGreaterLower
entryRuleEqualsGreaterLower
:
{ before(grammarAccess.getEqualsGreaterLowerRule()); }
	 ruleEqualsGreaterLower
{ after(grammarAccess.getEqualsGreaterLowerRule()); } 
	 EOF 
;

// Rule EqualsGreaterLower
ruleEqualsGreaterLower 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualsGreaterLowerAccess().getGroup()); }
		(rule__EqualsGreaterLower__Group__0)
		{ after(grammarAccess.getEqualsGreaterLowerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusMinus
entryRulePlusMinus
:
{ before(grammarAccess.getPlusMinusRule()); }
	 rulePlusMinus
{ after(grammarAccess.getPlusMinusRule()); } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup()); }
		(rule__PlusMinus__Group__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultDiv
entryRuleMultDiv
:
{ before(grammarAccess.getMultDivRule()); }
	 ruleMultDiv
{ after(grammarAccess.getMultDivRule()); } 
	 EOF 
;

// Rule MultDiv
ruleMultDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultDivAccess().getGroup()); }
		(rule__MultDiv__Group__0)
		{ after(grammarAccess.getMultDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotOpposite
entryRuleNotOpposite
:
{ before(grammarAccess.getNotOppositeRule()); }
	 ruleNotOpposite
{ after(grammarAccess.getNotOppositeRule()); } 
	 EOF 
;

// Rule NotOpposite
ruleNotOpposite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotOppositeAccess().getAlternatives()); }
		(rule__NotOpposite__Alternatives)
		{ after(grammarAccess.getNotOppositeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableRead
entryRuleVariableRead
:
{ before(grammarAccess.getVariableReadRule()); }
	 ruleVariableRead
{ after(grammarAccess.getVariableReadRule()); } 
	 EOF 
;

// Rule VariableRead
ruleVariableRead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableReadAccess().getGroup()); }
		(rule__VariableRead__Group__0)
		{ after(grammarAccess.getVariableReadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntValue
entryRuleIntValue
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
		(rule__IntValue__ValueAssignment)
		{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolValue
entryRuleBoolValue
:
{ before(grammarAccess.getBoolValueRule()); }
	 ruleBoolValue
{ after(grammarAccess.getBoolValueRule()); } 
	 EOF 
;

// Rule BoolValue
ruleBoolValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolValueAccess().getGroup()); }
		(rule__BoolValue__Group__0)
		{ after(grammarAccess.getBoolValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getRightParserRuleCall_0()); }
		ruleRight
		{ after(grammarAccess.getStatementAccess().getRightParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLeftParserRuleCall_1()); }
		ruleLeft
		{ after(grammarAccess.getStatementAccess().getLeftParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForwardParserRuleCall_2()); }
		ruleForward
		{ after(grammarAccess.getStatementAccess().getForwardParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPenDownParserRuleCall_3()); }
		rulePenDown
		{ after(grammarAccess.getStatementAccess().getPenDownParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPenUpParserRuleCall_4()); }
		rulePenUp
		{ after(grammarAccess.getStatementAccess().getPenUpParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getProcedureDefinitionParserRuleCall_5()); }
		ruleProcedureDefinition
		{ after(grammarAccess.getStatementAccess().getProcedureDefinitionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getProcedureCallParserRuleCall_6()); }
		ruleProcedureCall
		{ after(grammarAccess.getStatementAccess().getProcedureCallParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getControlStatementParserRuleCall_7()); }
		ruleControlStatement
		{ after(grammarAccess.getStatementAccess().getControlStatementParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_8()); }
		ruleBlock
		{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getEqualsGreaterLowerParserRuleCall_0()); }
		ruleEqualsGreaterLower
		{ after(grammarAccess.getExpressionAccess().getEqualsGreaterLowerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getExtendedExpressionParserRuleCall_1()); }
		ruleExtendedExpression
		{ after(grammarAccess.getExpressionAccess().getExtendedExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendedExpressionAccess().getOrParserRuleCall_0()); }
		ruleOr
		{ after(grammarAccess.getExtendedExpressionAccess().getOrParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExtendedExpressionAccess().getAndParserRuleCall_1()); }
		ruleAnd
		{ after(grammarAccess.getExtendedExpressionAccess().getAndParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIntValueParserRuleCall_0()); }
		ruleIntValue
		{ after(grammarAccess.getConstantAccess().getIntValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getBoolValueParserRuleCall_1()); }
		ruleBoolValue
		{ after(grammarAccess.getConstantAccess().getBoolValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlStatementAccess().getIfParserRuleCall_0()); }
		ruleIf
		{ after(grammarAccess.getControlStatementAccess().getIfParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getIfElseParserRuleCall_1()); }
		ruleIfElse
		{ after(grammarAccess.getControlStatementAccess().getIfElseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getWhileParserRuleCall_2()); }
		ruleWhile
		{ after(grammarAccess.getControlStatementAccess().getWhileParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getRepeatParserRuleCall_3()); }
		ruleRepeat
		{ after(grammarAccess.getControlStatementAccess().getRepeatParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getConditionAssignment_1_0()); }
		(rule__If__ConditionAssignment_1_0)
		{ after(grammarAccess.getIfAccess().getConditionAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGroup_1_1()); }
		(rule__If__Group_1_1__0)
		{ after(grammarAccess.getIfAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getConditionAssignment_1_0()); }
		(rule__IfElse__ConditionAssignment_1_0)
		{ after(grammarAccess.getIfElseAccess().getConditionAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfElseAccess().getGroup_1_1()); }
		(rule__IfElse__Group_1_1__0)
		{ after(grammarAccess.getIfElseAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionAssignment_1_0()); }
		(rule__While__ConditionAssignment_1_0)
		{ after(grammarAccess.getWhileAccess().getConditionAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhileAccess().getGroup_1_1()); }
		(rule__While__Group_1_1__0)
		{ after(grammarAccess.getWhileAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_0()); }
		(rule__EqualsGreaterLower__Group_1_0_0__0)
		{ after(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_1()); }
		(rule__EqualsGreaterLower__Group_1_0_1__0)
		{ after(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_2()); }
		(rule__EqualsGreaterLower__Group_1_0_2__0)
		{ after(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_0()); }
		(rule__PlusMinus__Group_1_0_0_0__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_1()); }
		(rule__PlusMinus__Group_1_0_0_1__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDivAccess().getGroup_1_0_0()); }
		(rule__MultDiv__Group_1_0_0__0)
		{ after(grammarAccess.getMultDivAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultDivAccess().getGroup_1_0_1()); }
		(rule__MultDiv__Group_1_0_1__0)
		{ after(grammarAccess.getMultDivAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOppositeAccess().getConstantParserRuleCall_0()); }
		ruleConstant
		{ after(grammarAccess.getNotOppositeAccess().getConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOppositeAccess().getVariableReadParserRuleCall_1()); }
		ruleVariableRead
		{ after(grammarAccess.getNotOppositeAccess().getVariableReadParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNotOppositeAccess().getGroup_2()); }
		(rule__NotOpposite__Group_2__0)
		{ after(grammarAccess.getNotOppositeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getNotOppositeAccess().getGroup_3()); }
		(rule__NotOpposite__Group_3__0)
		{ after(grammarAccess.getNotOppositeAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getNotOppositeAccess().getGroup_4()); }
		(rule__NotOpposite__Group_4__0)
		{ after(grammarAccess.getNotOppositeAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolValueAccess().getValueAssignment_1_0()); }
		(rule__BoolValue__ValueAssignment_1_0)
		{ after(grammarAccess.getBoolValueAccess().getValueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolValueAccess().getFalseKeyword_1_1()); }
		'false'
		{ after(grammarAccess.getBoolValueAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
	(rule__Parameter__NameAssignment_1)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_0()); }
	'right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getAngleAssignment_1()); }
	(rule__Right__AngleAssignment_1)
	{ after(grammarAccess.getRightAccess().getAngleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
	'left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getAngleAssignment_1()); }
	(rule__Left__AngleAssignment_1)
	{ after(grammarAccess.getLeftAccess().getAngleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
	'forward'
	{ after(grammarAccess.getForwardAccess().getForwardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getStepAssignment_1()); }
	(rule__Forward__StepAssignment_1)
	{ after(grammarAccess.getForwardAccess().getStepAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PenDown__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PenDown__Group__0__Impl
	rule__PenDown__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PenDown__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPenDownAccess().getPenDownAction_0()); }
	()
	{ after(grammarAccess.getPenDownAccess().getPenDownAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PenDown__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PenDown__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PenDown__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPenDownAccess().getPendownKeyword_1()); }
	'pendown'
	{ after(grammarAccess.getPenDownAccess().getPendownKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PenUp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PenUp__Group__0__Impl
	rule__PenUp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PenUp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPenUpAccess().getPenUpAction_0()); }
	()
	{ after(grammarAccess.getPenUpAccess().getPenUpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PenUp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PenUp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PenUp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPenUpAccess().getPenupKeyword_1()); }
	'penup'
	{ after(grammarAccess.getPenUpAccess().getPenupKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDefinition__Group__0__Impl
	rule__ProcedureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDefinitionAccess().getToKeyword_0()); }
	'to'
	{ after(grammarAccess.getProcedureDefinitionAccess().getToKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDefinition__Group__1__Impl
	rule__ProcedureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1()); }
	(rule__ProcedureDefinition__NameAssignment_1)
	{ after(grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDefinition__Group__2__Impl
	rule__ProcedureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2()); }
	(rule__ProcedureDefinition__ParametersAssignment_2)*
	{ after(grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDefinition__Group__3__Impl
	rule__ProcedureDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getStatementsAssignment_3()); }
		(rule__ProcedureDefinition__StatementsAssignment_3)
		{ after(grammarAccess.getProcedureDefinitionAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getStatementsAssignment_3()); }
		(rule__ProcedureDefinition__StatementsAssignment_3)*
		{ after(grammarAccess.getProcedureDefinitionAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDefinitionAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getProcedureDefinitionAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureCall__Group__0__Impl
	rule__ProcedureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureCallAccess().getDefinitionAssignment_0()); }
	(rule__ProcedureCall__DefinitionAssignment_0)
	{ after(grammarAccess.getProcedureCallAccess().getDefinitionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureCallAccess().getParameterValuesAssignment_1()); }
	(rule__ProcedureCall__ParameterValuesAssignment_1)*
	{ after(grammarAccess.getProcedureCallAccess().getParameterValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_1()); }
	(rule__If__Alternatives_1)
	{ after(grammarAccess.getIfAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfBlockAssignment_2()); }
	(rule__If__IfBlockAssignment_2)
	{ after(grammarAccess.getIfAccess().getIfBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1_1__0__Impl
	rule__If__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftSquareBracketKeyword_1_1_0()); }
	'['
	{ after(grammarAccess.getIfAccess().getLeftSquareBracketKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1_1__1__Impl
	rule__If__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getConditionAssignment_1_1_1()); }
	(rule__If__ConditionAssignment_1_1_1)
	{ after(grammarAccess.getIfAccess().getConditionAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightSquareBracketKeyword_1_1_2()); }
	']'
	{ after(grammarAccess.getIfAccess().getRightSquareBracketKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__0__Impl
	rule__IfElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfelseKeyword_0()); }
	'ifelse'
	{ after(grammarAccess.getIfElseAccess().getIfelseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__1__Impl
	rule__IfElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getAlternatives_1()); }
	(rule__IfElse__Alternatives_1)
	{ after(grammarAccess.getIfElseAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__2__Impl
	rule__IfElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfBlockAssignment_2()); }
	(rule__IfElse__IfBlockAssignment_2)
	{ after(grammarAccess.getIfElseAccess().getIfBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getElseBlockAssignment_3()); }
	(rule__IfElse__ElseBlockAssignment_3)
	{ after(grammarAccess.getIfElseAccess().getElseBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElse__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group_1_1__0__Impl
	rule__IfElse__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getLeftSquareBracketKeyword_1_1_0()); }
	'['
	{ after(grammarAccess.getIfElseAccess().getLeftSquareBracketKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group_1_1__1__Impl
	rule__IfElse__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getConditionAssignment_1_1_1()); }
	(rule__IfElse__ConditionAssignment_1_1_1)
	{ after(grammarAccess.getIfElseAccess().getConditionAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getRightSquareBracketKeyword_1_1_2()); }
	']'
	{ after(grammarAccess.getIfElseAccess().getRightSquareBracketKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getAlternatives_1()); }
	(rule__While__Alternatives_1)
	{ after(grammarAccess.getWhileAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
	(rule__While__BlockAssignment_2)
	{ after(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group_1_1__0__Impl
	rule__While__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLeftSquareBracketKeyword_1_1_0()); }
	'['
	{ after(grammarAccess.getWhileAccess().getLeftSquareBracketKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group_1_1__1__Impl
	rule__While__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getConditionAssignment_1_1_1()); }
	(rule__While__ConditionAssignment_1_1_1)
	{ after(grammarAccess.getWhileAccess().getConditionAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getRightSquareBracketKeyword_1_1_2()); }
	']'
	{ after(grammarAccess.getWhileAccess().getRightSquareBracketKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Repeat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__0__Impl
	rule__Repeat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }
	'repeat'
	{ after(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__1__Impl
	rule__Repeat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getConditionAssignment_1()); }
	(rule__Repeat__ConditionAssignment_1)
	{ after(grammarAccess.getRepeatAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getBlockAssignment_2()); }
	(rule__Repeat__BlockAssignment_2)
	{ after(grammarAccess.getRepeatAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_0()); }
	'and'
	{ after(grammarAccess.getAndAccess().getAndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
	rule__And__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getExpressionsAssignment_1()); }
	(rule__And__ExpressionsAssignment_1)
	{ after(grammarAccess.getAndAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAndAccess().getGroup_2()); }
		(rule__And__Group_2__0)
		{ after(grammarAccess.getAndAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getAndAccess().getGroup_2()); }
		(rule__And__Group_2__0)*
		{ after(grammarAccess.getAndAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_2__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getExpressionsAssignment_2_0()); }
	(rule__And__ExpressionsAssignment_2_0)
	{ after(grammarAccess.getAndAccess().getExpressionsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_0()); }
	'or'
	{ after(grammarAccess.getOrAccess().getOrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
	rule__Or__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getExpressionsAssignment_1()); }
	(rule__Or__ExpressionsAssignment_1)
	{ after(grammarAccess.getOrAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOrAccess().getGroup_2()); }
		(rule__Or__Group_2__0)
		{ after(grammarAccess.getOrAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getOrAccess().getGroup_2()); }
		(rule__Or__Group_2__0)*
		{ after(grammarAccess.getOrAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_2__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getExpressionsAssignment_2_0()); }
	(rule__Or__ExpressionsAssignment_2_0)
	{ after(grammarAccess.getOrAccess().getExpressionsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsGreaterLower__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group__0__Impl
	rule__EqualsGreaterLower__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getPlusMinusParserRuleCall_0()); }
	rulePlusMinus
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getPlusMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1()); }
	(rule__EqualsGreaterLower__Group_1__0)*
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsGreaterLower__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1__0__Impl
	rule__EqualsGreaterLower__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getAlternatives_1_0()); }
	(rule__EqualsGreaterLower__Alternatives_1_0)
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getRightExpressionAssignment_1_1()); }
	(rule__EqualsGreaterLower__RightExpressionAssignment_1_1)
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getRightExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsGreaterLower__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_0__0__Impl
	rule__EqualsGreaterLower__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getEqualsLeftExpressionAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getEqualsLeftExpressionAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getEqualsSignKeyword_1_0_0_1()); }
	'='
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getEqualsSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsGreaterLower__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_1__0__Impl
	rule__EqualsGreaterLower__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getGreaterLeftExpressionAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getGreaterLeftExpressionAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getGreaterThanSignKeyword_1_0_1_1()); }
	'>'
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getGreaterThanSignKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsGreaterLower__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_2__0__Impl
	rule__EqualsGreaterLower__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getLowerLeftExpressionAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getLowerLeftExpressionAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualsGreaterLower__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsGreaterLowerAccess().getLessThanSignKeyword_1_0_2_1()); }
	'<'
	{ after(grammarAccess.getEqualsGreaterLowerAccess().getLessThanSignKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group__0__Impl
	rule__PlusMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getMultDivParserRuleCall_0()); }
	ruleMultDiv
	{ after(grammarAccess.getPlusMinusAccess().getMultDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getGroup_1()); }
	(rule__PlusMinus__Group_1__0)*
	{ after(grammarAccess.getPlusMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getGroup_1_0()); }
	(rule__PlusMinus__Group_1_0__0)
	{ after(grammarAccess.getPlusMinusAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0__0__Impl
	rule__PlusMinus__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getAlternatives_1_0_0()); }
	(rule__PlusMinus__Alternatives_1_0_0)
	{ after(grammarAccess.getPlusMinusAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getRightExpressionAssignment_1_0_1()); }
	(rule__PlusMinus__RightExpressionAssignment_1_0_1)
	{ after(grammarAccess.getPlusMinusAccess().getRightExpressionAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1_0_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0_0_0__0__Impl
	rule__PlusMinus__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getPlusLeftExpressionAction_1_0_0_0_0()); }
	()
	{ after(grammarAccess.getPlusMinusAccess().getPlusLeftExpressionAction_1_0_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_1_0_0_0_1()); }
	'+'
	{ after(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_1_0_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1_0_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0_0_1__0__Impl
	rule__PlusMinus__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getMinusLeftExpressionAction_1_0_0_1_0()); }
	()
	{ after(grammarAccess.getPlusMinusAccess().getMinusLeftExpressionAction_1_0_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1_0_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1_0_0_1_1()); }
	'-'
	{ after(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1_0_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group__0__Impl
	rule__MultDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getNotOppositeParserRuleCall_0()); }
	ruleNotOpposite
	{ after(grammarAccess.getMultDivAccess().getNotOppositeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getGroup_1()); }
	(rule__MultDiv__Group_1__0)*
	{ after(grammarAccess.getMultDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1__0__Impl
	rule__MultDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getAlternatives_1_0()); }
	(rule__MultDiv__Alternatives_1_0)
	{ after(grammarAccess.getMultDivAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getRightExpressionAssignment_1_1()); }
	(rule__MultDiv__RightExpressionAssignment_1_1)
	{ after(grammarAccess.getMultDivAccess().getRightExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDiv__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1_0_0__0__Impl
	rule__MultDiv__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getMultLeftExpressionAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultDivAccess().getMultLeftExpressionAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getMultDivAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDiv__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1_0_1__0__Impl
	rule__MultDiv__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getDivLeftExpressionAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getMultDivAccess().getDivLeftExpressionAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDiv__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivAccess().getSolidusKeyword_1_0_1_1()); }
	'/'
	{ after(grammarAccess.getMultDivAccess().getSolidusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOpposite__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_2__0__Impl
	rule__NotOpposite__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getNotOppositeAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_2__1__Impl
	rule__NotOpposite__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
	{ after(grammarAccess.getNotOppositeAccess().getExpressionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getNotOppositeAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOpposite__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_3__0__Impl
	rule__NotOpposite__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getNotAction_3_0()); }
	()
	{ after(grammarAccess.getNotOppositeAccess().getNotAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_3__1__Impl
	rule__NotOpposite__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getNotKeyword_3_1()); }
	'not'
	{ after(grammarAccess.getNotOppositeAccess().getNotKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getExpressionAssignment_3_2()); }
	(rule__NotOpposite__ExpressionAssignment_3_2)
	{ after(grammarAccess.getNotOppositeAccess().getExpressionAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOpposite__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_4__0__Impl
	rule__NotOpposite__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getOppositeAction_4_0()); }
	()
	{ after(grammarAccess.getNotOppositeAccess().getOppositeAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_4__1__Impl
	rule__NotOpposite__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getHyphenMinusKeyword_4_1()); }
	'-'
	{ after(grammarAccess.getNotOppositeAccess().getHyphenMinusKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOpposite__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOppositeAccess().getExpressionAssignment_4_2()); }
	(rule__NotOpposite__ExpressionAssignment_4_2)
	{ after(grammarAccess.getNotOppositeAccess().getExpressionAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRead__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableRead__Group__0__Impl
	rule__VariableRead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRead__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableReadAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getVariableReadAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRead__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableRead__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRead__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableReadAccess().getNameAssignment_1()); }
	(rule__VariableRead__NameAssignment_1)
	{ after(grammarAccess.getVariableReadAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolValue__Group__0__Impl
	rule__BoolValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolValueAccess().getBoolValueAction_0()); }
	()
	{ after(grammarAccess.getBoolValueAccess().getBoolValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolValueAccess().getAlternatives_1()); }
	(rule__BoolValue__Alternatives_1)
	{ after(grammarAccess.getBoolValueAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Logo__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogoAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getLogoAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__AngleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getAngleExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getRightAccess().getAngleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__AngleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getAngleExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLeftAccess().getAngleExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__StepAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardAccess().getStepExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForwardAccess().getStepExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getParametersParameterParserRuleCall_2_0()); }
		ruleParameter
		{ after(grammarAccess.getProcedureDefinitionAccess().getParametersParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDefinitionAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getProcedureDefinitionAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__DefinitionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureCallAccess().getDefinitionProcedureDefinitionCrossReference_0_0()); }
		(
			{ before(grammarAccess.getProcedureCallAccess().getDefinitionProcedureDefinitionIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getProcedureCallAccess().getDefinitionProcedureDefinitionIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getProcedureCallAccess().getDefinitionProcedureDefinitionCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__ParameterValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureCallAccess().getParameterValuesExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getProcedureCallAccess().getParameterValuesExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getConditionExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getIfAccess().getConditionExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ConditionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__IfBlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIfBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getIfAccess().getIfBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__ConditionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getConditionExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getIfElseAccess().getConditionExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__ConditionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfElseAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__IfBlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getIfBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getIfElseAccess().getIfBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__ElseBlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getElseBlockBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getIfElseAccess().getElseBlockBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getConditionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getRepeatAccess().getConditionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getExpressionsEqualsGreaterLowerParserRuleCall_1_0()); }
		ruleEqualsGreaterLower
		{ after(grammarAccess.getAndAccess().getExpressionsEqualsGreaterLowerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__ExpressionsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getExpressionsEqualsGreaterLowerParserRuleCall_2_0_0()); }
		ruleEqualsGreaterLower
		{ after(grammarAccess.getAndAccess().getExpressionsEqualsGreaterLowerParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getExpressionsEqualsGreaterLowerParserRuleCall_1_0()); }
		ruleEqualsGreaterLower
		{ after(grammarAccess.getOrAccess().getExpressionsEqualsGreaterLowerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__ExpressionsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getExpressionsEqualsGreaterLowerParserRuleCall_2_0_0()); }
		ruleEqualsGreaterLower
		{ after(grammarAccess.getOrAccess().getExpressionsEqualsGreaterLowerParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsGreaterLower__RightExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsGreaterLowerAccess().getRightExpressionPlusMinusParserRuleCall_1_1_0()); }
		rulePlusMinus
		{ after(grammarAccess.getEqualsGreaterLowerAccess().getRightExpressionPlusMinusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__RightExpressionAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusAccess().getRightExpressionMultDivParserRuleCall_1_0_1_0()); }
		ruleMultDiv
		{ after(grammarAccess.getPlusMinusAccess().getRightExpressionMultDivParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDiv__RightExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDivAccess().getRightExpressionNotOppositeParserRuleCall_1_1_0()); }
		ruleNotOpposite
		{ after(grammarAccess.getMultDivAccess().getRightExpressionNotOppositeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__ExpressionAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOppositeAccess().getExpressionNotOppositeParserRuleCall_3_2_0()); }
		ruleNotOpposite
		{ after(grammarAccess.getNotOppositeAccess().getExpressionNotOppositeParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOpposite__ExpressionAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOppositeAccess().getExpressionNotOppositeParserRuleCall_4_2_0()); }
		ruleNotOpposite
		{ after(grammarAccess.getNotOppositeAccess().getExpressionNotOppositeParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRead__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableReadAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableReadAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolValueAccess().getValueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getBoolValueAccess().getValueTrueKeyword_1_0_0()); }
			'true'
			{ after(grammarAccess.getBoolValueAccess().getValueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getBoolValueAccess().getValueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
