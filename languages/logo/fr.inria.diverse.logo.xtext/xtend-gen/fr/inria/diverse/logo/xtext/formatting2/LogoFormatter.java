/**
 * generated by Xtext 2.14.0
 */
package fr.inria.diverse.logo.xtext.formatting2;

import com.google.inject.Inject;
import fr.inria.diverse.logo.Expression;
import fr.inria.diverse.logo.Logo;
import fr.inria.diverse.logo.Statement;
import fr.inria.diverse.logo.statement.Right;
import fr.inria.diverse.logo.xtext.services.LogoGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LogoFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LogoGrammarAccess _logoGrammarAccess;
  
  protected void _format(final Logo logo, @Extension final IFormattableDocument document) {
    EList<Statement> _statements = logo.getStatements();
    for (final Statement statement : _statements) {
      document.<Statement>format(statement);
    }
  }
  
  protected void _format(final Right right, @Extension final IFormattableDocument document) {
    document.<Expression>format(right.getAngle());
  }
  
  public void format(final Object right, final IFormattableDocument document) {
    if (right instanceof XtextResource) {
      _format((XtextResource)right, document);
      return;
    } else if (right instanceof Right) {
      _format((Right)right, document);
      return;
    } else if (right instanceof Logo) {
      _format((Logo)right, document);
      return;
    } else if (right instanceof EObject) {
      _format((EObject)right, document);
      return;
    } else if (right == null) {
      _format((Void)null, document);
      return;
    } else if (right != null) {
      _format(right, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(right, document).toString());
    }
  }
}
