/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.tetrabox.minijava.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesTypeDeclarationParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		
		//Program:
		//	('package' name=QualifiedName ';')?
		//	imports+=Import*
		//	classes+=TypeDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';')? imports+=Import* classes+=TypeDeclaration*
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//classes+=TypeDeclaration*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }
		
		//TypeDeclaration
		public RuleCall getClassesTypeDeclarationParserRuleCall_2_0() { return cClassesTypeDeclarationParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClazzParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDeclaration:
		//	Clazz | Interface;
		@Override public ParserRule getRule() { return rule; }
		
		//Clazz | Interface
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clazz
		public RuleCall getClazzParserRuleCall_0() { return cClazzParserRuleCall_0; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }
	}
	public class ClazzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Clazz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessLevelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessLevelAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessLevelAssignment_0.eContents().get(0);
		private final Assignment cIsabstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsabstractAbstractKeyword_1_0 = (Keyword)cIsabstractAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperClassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperClassClazzCrossReference_4_1_0 = (CrossReference)cSuperClassAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperClassClazzQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperClassClazzCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cImplementsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cImplementzAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cImplementzInterfaceCrossReference_5_1_0 = (CrossReference)cImplementzAssignment_5_1.eContents().get(0);
		private final RuleCall cImplementzInterfaceQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cImplementzInterfaceCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cImplementzAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cImplementzInterfaceCrossReference_5_2_1_0 = (CrossReference)cImplementzAssignment_5_2_1.eContents().get(0);
		private final RuleCall cImplementzInterfaceQualifiedNameParserRuleCall_5_2_1_0_1 = (RuleCall)cImplementzInterfaceCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMembersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMembersMemberParserRuleCall_7_0 = (RuleCall)cMembersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Clazz:
		//	accessLevel=AccessLevel? isabstract?='abstract'? 'class' name=ID ('extends' superClass=[Clazz|QualifiedName])?
		//	('implements' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)? '{'
		//	members+=Member*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//accessLevel=AccessLevel? isabstract?='abstract'? 'class' name=ID ('extends' superClass=[Clazz|QualifiedName])?
		//('implements' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)? '{' members+=Member*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//accessLevel=AccessLevel?
		public Assignment getAccessLevelAssignment_0() { return cAccessLevelAssignment_0; }
		
		//AccessLevel
		public RuleCall getAccessLevelAccessLevelEnumRuleCall_0_0() { return cAccessLevelAccessLevelEnumRuleCall_0_0; }
		
		//isabstract?='abstract'?
		public Assignment getIsabstractAssignment_1() { return cIsabstractAssignment_1; }
		
		//'abstract'
		public Keyword getIsabstractAbstractKeyword_1_0() { return cIsabstractAbstractKeyword_1_0; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('extends' superClass=[Clazz|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//superClass=[Clazz|QualifiedName]
		public Assignment getSuperClassAssignment_4_1() { return cSuperClassAssignment_4_1; }
		
		//[Clazz|QualifiedName]
		public CrossReference getSuperClassClazzCrossReference_4_1_0() { return cSuperClassClazzCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassClazzQualifiedNameParserRuleCall_4_1_0_1() { return cSuperClassClazzQualifiedNameParserRuleCall_4_1_0_1; }
		
		//('implements' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'implements'
		public Keyword getImplementsKeyword_5_0() { return cImplementsKeyword_5_0; }
		
		//implementz+=[Interface|QualifiedName]
		public Assignment getImplementzAssignment_5_1() { return cImplementzAssignment_5_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getImplementzInterfaceCrossReference_5_1_0() { return cImplementzInterfaceCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getImplementzInterfaceQualifiedNameParserRuleCall_5_1_0_1() { return cImplementzInterfaceQualifiedNameParserRuleCall_5_1_0_1; }
		
		//(',' implementz+=[Interface|QualifiedName])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//implementz+=[Interface|QualifiedName]
		public Assignment getImplementzAssignment_5_2_1() { return cImplementzAssignment_5_2_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getImplementzInterfaceCrossReference_5_2_1_0() { return cImplementzInterfaceCrossReference_5_2_1_0; }
		
		//QualifiedName
		public RuleCall getImplementzInterfaceQualifiedNameParserRuleCall_5_2_1_0_1() { return cImplementzInterfaceQualifiedNameParserRuleCall_5_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//members+=Member*
		public Assignment getMembersAssignment_7() { return cMembersAssignment_7; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_7_0() { return cMembersMemberParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessLevelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessLevelAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessLevelAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplementzAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cImplementzInterfaceCrossReference_3_1_0 = (CrossReference)cImplementzAssignment_3_1.eContents().get(0);
		private final RuleCall cImplementzInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cImplementzInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cImplementzAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cImplementzInterfaceCrossReference_3_2_1_0 = (CrossReference)cImplementzAssignment_3_2_1.eContents().get(0);
		private final RuleCall cImplementzInterfaceQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cImplementzInterfaceCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Interface:
		//	accessLevel=AccessLevel? 'interface' name=ID ('extends' implementz+=[Interface|QualifiedName] (','
		//	implementz+=[Interface|QualifiedName])*)? '{'
		//	members+=Member*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//accessLevel=AccessLevel? 'interface' name=ID ('extends' implementz+=[Interface|QualifiedName] (','
		//implementz+=[Interface|QualifiedName])*)? '{' members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//accessLevel=AccessLevel?
		public Assignment getAccessLevelAssignment_0() { return cAccessLevelAssignment_0; }
		
		//AccessLevel
		public RuleCall getAccessLevelAccessLevelEnumRuleCall_0_0() { return cAccessLevelAccessLevelEnumRuleCall_0_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//implementz+=[Interface|QualifiedName]
		public Assignment getImplementzAssignment_3_1() { return cImplementzAssignment_3_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getImplementzInterfaceCrossReference_3_1_0() { return cImplementzInterfaceCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getImplementzInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cImplementzInterfaceQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' implementz+=[Interface|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//implementz+=[Interface|QualifiedName]
		public Assignment getImplementzAssignment_3_2_1() { return cImplementzAssignment_3_2_1; }
		
		//[Interface|QualifiedName]
		public CrossReference getImplementzInterfaceCrossReference_3_2_1_0() { return cImplementzInterfaceCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getImplementzInterfaceQualifiedNameParserRuleCall_3_2_1_0_1() { return cImplementzInterfaceQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Field | Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Assignment cIsabstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsabstractAbstractKeyword_1_0 = (Keyword)cIsabstractAssignment_1.eContents().get(0);
		private final Assignment cIsstaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsstaticStaticKeyword_2_0 = (Keyword)cIsstaticAssignment_2.eContents().get(0);
		private final Assignment cTypeRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRefTypeRefParserRuleCall_3_0 = (RuleCall)cTypeRefAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParamsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_6_0_0 = (RuleCall)cParamsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_6_1_1_0 = (RuleCall)cParamsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_8_0_0 = (RuleCall)cBodyAssignment_8_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//Method:
		//	access=AccessLevel? isabstract?='abstract'? isstatic?='static'? typeRef=TypeRef name=ID?
		//	'(' (params+=Parameter (',' params+=Parameter)*)? ')' (body=Block | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//access=AccessLevel? isabstract?='abstract'? isstatic?='static'? typeRef=TypeRef name=ID? '(' (params+=Parameter (','
		//params+=Parameter)*)? ')' (body=Block | ';')
		public Group getGroup() { return cGroup; }
		
		//access=AccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_0_0() { return cAccessAccessLevelEnumRuleCall_0_0; }
		
		//isabstract?='abstract'?
		public Assignment getIsabstractAssignment_1() { return cIsabstractAssignment_1; }
		
		//'abstract'
		public Keyword getIsabstractAbstractKeyword_1_0() { return cIsabstractAbstractKeyword_1_0; }
		
		//isstatic?='static'?
		public Assignment getIsstaticAssignment_2() { return cIsstaticAssignment_2; }
		
		//'static'
		public Keyword getIsstaticStaticKeyword_2_0() { return cIsstaticStaticKeyword_2_0; }
		
		//typeRef=TypeRef
		public Assignment getTypeRefAssignment_3() { return cTypeRefAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeRefTypeRefParserRuleCall_3_0() { return cTypeRefTypeRefParserRuleCall_3_0; }
		
		//name=ID?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_6_0() { return cParamsAssignment_6_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_0_0() { return cParamsParameterParserRuleCall_6_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_6_1_1() { return cParamsAssignment_6_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_1_1_0() { return cParamsParameterParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Block | ';'
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//body=Block
		public Assignment getBodyAssignment_8_0() { return cBodyAssignment_8_0; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_8_0_0() { return cBodyBlockParserRuleCall_8_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRefTypeRefParserRuleCall_0_0 = (RuleCall)cTypeRefAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	typeRef=TypeRef name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//typeRef=TypeRef name=ID
		public Group getGroup() { return cGroup; }
		
		//typeRef=TypeRef
		public Assignment getTypeRefAssignment_0() { return cTypeRefAssignment_0; }
		
		//TypeRef
		public RuleCall getTypeRefTypeRefParserRuleCall_0_0() { return cTypeRefTypeRefParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefTypeRefParserRuleCall_1_0 = (RuleCall)cTypeRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	access=AccessLevel? typeRef=TypeRef name=ID ('=' defaultValue=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//access=AccessLevel? typeRef=TypeRef name=ID ('=' defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//access=AccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_0_0() { return cAccessAccessLevelEnumRuleCall_0_0; }
		
		//typeRef=TypeRef
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }
		
		//TypeRef
		public RuleCall getTypeRefTypeRefParserRuleCall_1_0() { return cTypeRefTypeRefParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_3_1_0() { return cDefaultValueExpressionParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cReturnParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cPrintStatementParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cSelectionExpressionParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//Statement:
		//	Return ';' |
		//	=> Assignment ';' | IfStatement | WhileStatement | ForStatement | PrintStatement ";" | Block | SelectionExpression
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//Return ';' | => Assignment ';' | IfStatement | WhileStatement | ForStatement | PrintStatement ";" | Block |
		//SelectionExpression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Return ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//Return
		public RuleCall getReturnParserRuleCall_0_0() { return cReturnParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//=> Assignment ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//=> Assignment
		public RuleCall getAssignmentParserRuleCall_1_0() { return cAssignmentParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }
		
		//PrintStatement ";"
		public Group getGroup_5() { return cGroup_5; }
		
		//PrintStatement
		public RuleCall getPrintStatementParserRuleCall_5_0() { return cPrintStatementParserRuleCall_5_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_6() { return cBlockParserRuleCall_6; }
		
		//SelectionExpression ';'
		public Group getGroup_7() { return cGroup_7; }
		
		//SelectionExpression
		public RuleCall getSelectionExpressionParserRuleCall_7_0() { return cSelectionExpressionParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class PrintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.PrintStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPrintlnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PrintStatement:
		//	"System" "." "out" "." "println" "(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"System" "." "out" "." "println" "(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"System"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//"out"
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//"println"
		public Keyword getPrintlnKeyword_4() { return cPrintlnKeyword_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Return:
		//	'return' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	'if' '(' expression=Expression ')' thenBlock=Block (=> 'else' elseBlock=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=Expression ')' thenBlock=Block (=> 'else' elseBlock=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=Block
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//Block
		public RuleCall getThenBlockBlockParserRuleCall_4_0() { return cThenBlockBlockParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	'while' '(' condition=Expression ')' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' condition=Expression ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationAssignmentParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProgressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProgressionAssignmentParserRuleCall_6_0 = (RuleCall)cProgressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' declaration=Assignment ';' condition=Expression ';' progression=Assignment ')' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' declaration=Assignment ';' condition=Expression ';' progression=Assignment ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//declaration=Assignment
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//Assignment
		public RuleCall getDeclarationAssignmentParserRuleCall_2_0() { return cDeclarationAssignmentParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//progression=Assignment
		public Assignment getProgressionAssignment_6() { return cProgressionAssignment_6; }
		
		//Assignment
		public RuleCall getProgressionAssignmentParserRuleCall_6_0() { return cProgressionAssignmentParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSingleTypeRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayTypeRefTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TypeRef:
		//	SingleTypeRef ({ArrayTypeRef.typeRef=current} '[' ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleTypeRef ({ArrayTypeRef.typeRef=current} '[' ']')?
		public Group getGroup() { return cGroup; }
		
		//SingleTypeRef
		public RuleCall getSingleTypeRefParserRuleCall_0() { return cSingleTypeRefParserRuleCall_0; }
		
		//({ArrayTypeRef.typeRef=current} '[' ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArrayTypeRef.typeRef=current}
		public Action getArrayTypeRefTypeRefAction_1_0() { return cArrayTypeRefTypeRefAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SingleTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.SingleTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTypeRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBooleanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringTypeRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStringKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVoidTypeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cVoidKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//SingleTypeRef:
		//	ClassRef | {IntegerTypeRef} 'int' | {BooleanTypeRef} 'boolean' | {StringTypeRef} 'String' | {VoidTypeRef} 'void';
		@Override public ParserRule getRule() { return rule; }
		
		//ClassRef | {IntegerTypeRef} 'int' | {BooleanTypeRef} 'boolean' | {StringTypeRef} 'String' | {VoidTypeRef} 'void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassRef
		public RuleCall getClassRefParserRuleCall_0() { return cClassRefParserRuleCall_0; }
		
		//{IntegerTypeRef} 'int'
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntegerTypeRef}
		public Action getIntegerTypeRefAction_1_0() { return cIntegerTypeRefAction_1_0; }
		
		//'int'
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }
		
		//{BooleanTypeRef} 'boolean'
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanTypeRef}
		public Action getBooleanTypeRefAction_2_0() { return cBooleanTypeRefAction_2_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2_1() { return cBooleanKeyword_2_1; }
		
		//{StringTypeRef} 'String'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringTypeRef}
		public Action getStringTypeRefAction_3_0() { return cStringTypeRefAction_3_0; }
		
		//'String'
		public Keyword getStringKeyword_3_1() { return cStringKeyword_3_1; }
		
		//{VoidTypeRef} 'void'
		public Group getGroup_4() { return cGroup_4; }
		
		//{VoidTypeRef}
		public Action getVoidTypeRefAction_4_0() { return cVoidTypeRefAction_4_0; }
		
		//'void'
		public Keyword getVoidKeyword_4_1() { return cVoidKeyword_4_1; }
	}
	public class ClassRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.ClassRef");
		private final Assignment cReferencedClassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedClassTypeDeclarationCrossReference_0 = (CrossReference)cReferencedClassAssignment.eContents().get(0);
		private final RuleCall cReferencedClassTypeDeclarationQualifiedNameParserRuleCall_0_1 = (RuleCall)cReferencedClassTypeDeclarationCrossReference_0.eContents().get(1);
		
		//ClassRef:
		//	referencedClass=[TypeDeclaration|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//referencedClass=[TypeDeclaration|QualifiedName]
		public Assignment getReferencedClassAssignment() { return cReferencedClassAssignment; }
		
		//[TypeDeclaration|QualifiedName]
		public CrossReference getReferencedClassTypeDeclarationCrossReference_0() { return cReferencedClassTypeDeclarationCrossReference_0; }
		
		//QualifiedName
		public RuleCall getReferencedClassTypeDeclarationQualifiedNameParserRuleCall_0_1() { return cReferencedClassTypeDeclarationQualifiedNameParserRuleCall_0_1; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedElement:
		//	TypedDeclaration | TypeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedDeclaration | TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedDeclaration
		public RuleCall getTypedDeclarationParserRuleCall_0() { return cTypedDeclarationParserRuleCall_0; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1() { return cTypeDeclarationParserRuleCall_1; }
	}
	public class TypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TypedDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedDeclaration:
		//	Symbol | Member;
		@Override public ParserRule getRule() { return rule; }
		
		//Symbol | Member
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Symbol
		public RuleCall getSymbolParserRuleCall_0() { return cSymbolParserRuleCall_0; }
		
		//Member
		public RuleCall getMemberParserRuleCall_1() { return cMemberParserRuleCall_1; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// here we need to set up an artificial priority with =>
		//Symbol:
		//	=> Parameter | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Parameter | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRefTypeRefParserRuleCall_0_0 = (RuleCall)cTypeRefAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	typeRef=TypeRef name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//typeRef=TypeRef name=ID
		public Group getGroup() { return cGroup; }
		
		//typeRef=TypeRef
		public Assignment getTypeRefAssignment_0() { return cTypeRefAssignment_0; }
		
		//TypeRef
		public RuleCall getTypeRefTypeRefParserRuleCall_0_0() { return cTypeRefTypeRefParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssigneeAssigneeParserRuleCall_0_0 = (RuleCall)cAssigneeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	assignee=Assignee '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=Assignee '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//assignee=Assignee
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//Assignee
		public RuleCall getAssigneeAssigneeParserRuleCall_0_0() { return cAssigneeAssigneeParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class AssigneeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Assignee");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Assignee:
		//	=> ArrayAccess | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ArrayAccess | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ArrayAccess
		public RuleCall getArrayAccessParserRuleCall_0() { return cArrayAccessParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualityLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cInequalityLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equality returns Expression:
		//	Comparison (({Equality.left=current} "==" | {Inequality.left=current} "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (({Equality.left=current} "==" | {Inequality.left=current} "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({Equality.left=current} "==" | {Inequality.left=current} "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current} "==" | {Inequality.left=current} "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equality.left=current} "=="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0_0_0() { return cEqualityLeftAction_1_0_0_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{Inequality.left=current} "!="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Inequality.left=current}
		public Action getInequalityLeftAction_1_0_1_0() { return cInequalityLeftAction_1_0_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSuperiorOrEqualLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cInferiorOrEqualLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cSuperiorLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cInferiorLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//	Modulo (({SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
		//	{Inferior.left=current} "<") right=Modulo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Modulo (({SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
		//{Inferior.left=current} "<") right=Modulo)*
		public Group getGroup() { return cGroup; }
		
		//Modulo
		public RuleCall getModuloParserRuleCall_0() { return cModuloParserRuleCall_0; }
		
		//(({SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
		//{Inferior.left=current} "<") right=Modulo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
		//{Inferior.left=current} "<"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{SuperiorOrEqual.left=current} ">="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{SuperiorOrEqual.left=current}
		public Action getSuperiorOrEqualLeftAction_1_0_0_0() { return cSuperiorOrEqualLeftAction_1_0_0_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//{InferiorOrEqual.left=current} "<="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{InferiorOrEqual.left=current}
		public Action getInferiorOrEqualLeftAction_1_0_1_0() { return cInferiorOrEqualLeftAction_1_0_1_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }
		
		//{Superior.left=current} ">"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Superior.left=current}
		public Action getSuperiorLeftAction_1_0_2_0() { return cSuperiorLeftAction_1_0_2_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_0_2_1() { return cGreaterThanSignKeyword_1_0_2_1; }
		
		//{Inferior.left=current} "<"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{Inferior.left=current}
		public Action getInferiorLeftAction_1_0_3_0() { return cInferiorLeftAction_1_0_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_3_1() { return cLessThanSignKeyword_1_0_3_1; }
		
		//right=Modulo
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Modulo
		public RuleCall getRightModuloParserRuleCall_1_1_0() { return cRightModuloParserRuleCall_1_1_0; }
	}
	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModuloLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Modulo returns Expression:
		//	PlusOrMinus ({Modulo.left=current} "%" right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Modulo.left=current} "%" right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Modulo.left=current} "%" right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0() { return cModuloLeftAction_1_0; }
		
		//"%"
		public Keyword getPercentSignKeyword_1_1() { return cPercentSignKeyword_1_1; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArrayAccessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightArrayAccessParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv returns Expression:
		//	ArrayAccess (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ArrayAccess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayAccess (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ArrayAccess)*
		public Group getGroup() { return cGroup; }
		
		//ArrayAccess
		public RuleCall getArrayAccessParserRuleCall_0() { return cArrayAccessParserRuleCall_0; }
		
		//(({Multiplication.left=current} '*' | {Division.left=current} '/') right=ArrayAccess)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current} '*' | {Division.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multiplication.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0() { return cMultiplicationLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Division.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=ArrayAccess
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ArrayAccess
		public RuleCall getRightArrayAccessParserRuleCall_1_1_0() { return cRightArrayAccessParserRuleCall_1_1_0; }
	}
	public class ArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.ArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArrayLengthParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayAccessObjectAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayAccess returns Expression:
		//	ArrayLength ({ArrayAccess.object=current} '[' index=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayLength ({ArrayAccess.object=current} '[' index=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_0() { return cArrayLengthParserRuleCall_0; }
		
		//({ArrayAccess.object=current} '[' index=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArrayAccess.object=current}
		public Action getArrayAccessObjectAction_1_0() { return cArrayAccessObjectAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_2_0() { return cIndexExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.ArrayLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayLengthArrayAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLengthKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ArrayLength returns Expression:
		//	Primary ({ArrayLength.array=current} '.' 'length')?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({ArrayLength.array=current} '.' 'length')?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({ArrayLength.array=current} '.' 'length')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArrayLength.array=current}
		public Action getArrayLengthArrayAction_1_0() { return cArrayLengthArrayAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//'length'
		public Keyword getLengthKeyword_1_2() { return cLengthKeyword_1_2; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNegAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cSelectionExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Expression:
		//	'(' Expression ')' | {Not} => "!" expression=Primary | {Neg} => "-" expression=Primary | SelectionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} => "!" expression=Primary | {Neg} => "-" expression=Primary | SelectionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} => "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//=> "!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Neg} => "-" expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Neg}
		public Action getNegAction_2_0() { return cNegAction_2_0; }
		
		//=> "-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//SelectionExpression
		public RuleCall getSelectionExpressionParserRuleCall_3() { return cSelectionExpressionParserRuleCall_3; }
	}
	public class SelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.SelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cFieldAccessReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cFieldFieldCrossReference_1_0_2_0 = (CrossReference)cFieldAssignment_1_0_2.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cFieldFieldCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cMethodCallReceiverAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cMethodMethodCrossReference_1_1_2_0 = (CrossReference)cMethodAssignment_1_1_2.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_1_1_2_0_1 = (RuleCall)cMethodMethodCrossReference_1_1_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Assignment cArgsAssignment_1_1_4_0 = (Assignment)cGroup_1_1_4.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_4_0_0 = (RuleCall)cArgsAssignment_1_1_4_0.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_4_1_0 = (Keyword)cGroup_1_1_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_4_1_1 = (Assignment)cGroup_1_1_4_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_4_1_1_0 = (RuleCall)cArgsAssignment_1_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//SelectionExpression returns Expression:
		//	TerminalExpression ({FieldAccess.receiver=current} '.' field=[Field] | {MethodCall.receiver=current} '.'
		//	method=[Method]
		//	'(' (args+=Expression (',' args+=Expression)*)? ')')*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({FieldAccess.receiver=current} '.' field=[Field] | {MethodCall.receiver=current} '.' method=[Method]
		//'(' (args+=Expression (',' args+=Expression)*)? ')')*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({FieldAccess.receiver=current} '.' field=[Field] | {MethodCall.receiver=current} '.' method=[Method] '('
		//(args+=Expression (',' args+=Expression)*)? ')')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{FieldAccess.receiver=current} '.' field=[Field]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{FieldAccess.receiver=current}
		public Action getFieldAccessReceiverAction_1_0_0() { return cFieldAccessReceiverAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//field=[Field]
		public Assignment getFieldAssignment_1_0_2() { return cFieldAssignment_1_0_2; }
		
		//[Field]
		public CrossReference getFieldFieldCrossReference_1_0_2_0() { return cFieldFieldCrossReference_1_0_2_0; }
		
		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_1_0_2_0_1() { return cFieldFieldIDTerminalRuleCall_1_0_2_0_1; }
		
		//{MethodCall.receiver=current} '.' method=[Method] '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{MethodCall.receiver=current}
		public Action getMethodCallReceiverAction_1_1_0() { return cMethodCallReceiverAction_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//method=[Method]
		public Assignment getMethodAssignment_1_1_2() { return cMethodAssignment_1_1_2; }
		
		//[Method]
		public CrossReference getMethodMethodCrossReference_1_1_2_0() { return cMethodMethodCrossReference_1_1_2_0; }
		
		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_1_1_2_0_1() { return cMethodMethodIDTerminalRuleCall_1_1_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_3() { return cLeftParenthesisKeyword_1_1_3; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_1_4_0() { return cArgsAssignment_1_1_4_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_4_0_0() { return cArgsExpressionParserRuleCall_1_1_4_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_4_1_0() { return cCommaKeyword_1_1_4_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_1_4_1_1() { return cArgsAssignment_1_1_4_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_4_1_1_0() { return cArgsExpressionParserRuleCall_1_1_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_5() { return cRightParenthesisKeyword_1_1_5; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNativeExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cThisAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSuperAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSuperKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNullAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNullKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNewObjectAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeClazzCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeClazzIDTerminalRuleCall_7_2_0_1 = (RuleCall)cTypeClazzCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Assignment cArgsAssignment_7_4_0 = (Assignment)cGroup_7_4.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_7_4_0_0 = (RuleCall)cArgsAssignment_7_4_0.eContents().get(0);
		private final Group cGroup_7_4_1 = (Group)cGroup_7_4.eContents().get(1);
		private final Keyword cCommaKeyword_7_4_1_0 = (Keyword)cGroup_7_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_7_4_1_1 = (Assignment)cGroup_7_4_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_7_4_1_1_0 = (RuleCall)cArgsAssignment_7_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cNewArrayAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cNewKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cTypeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_8_2_0 = (RuleCall)cTypeAssignment_8_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cSizeAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cSizeExpressionParserRuleCall_8_4_0 = (RuleCall)cSizeAssignment_8_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cSymbolRefAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cSymbolAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_9_1_0 = (CrossReference)cSymbolAssignment_9_1.eContents().get(0);
		private final RuleCall cSymbolSymbolIDTerminalRuleCall_9_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_9_1_0.eContents().get(1);
		
		//TerminalExpression returns Expression:
		//	{NativeExpression} "'''" value=STRING "'''" | {StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant}
		//	value=('true' | 'false') | {This} 'this' | {Super} 'super' | {Null} 'null' | {NewObject} 'new' type=[Clazz] => '('
		//	(args+=Expression (',' args+=Expression)*)? ')' | {NewArray} 'new' type=TypeRef => '[' size=Expression ']' |
		//	{SymbolRef} symbol=[Symbol];
		@Override public ParserRule getRule() { return rule; }
		
		//{NativeExpression} "'''" value=STRING "'''" | {StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant}
		//value=('true' | 'false') | {This} 'this' | {Super} 'super' | {Null} 'null' | {NewObject} 'new' type=[Clazz] => '('
		//(args+=Expression (',' args+=Expression)*)? ')' | {NewArray} 'new' type=TypeRef => '[' size=Expression ']' |
		//{SymbolRef} symbol=[Symbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NativeExpression} "'''" value=STRING "'''"
		public Group getGroup_0() { return cGroup_0; }
		
		//{NativeExpression}
		public Action getNativeExpressionAction_0_0() { return cNativeExpressionAction_0_0; }
		
		//"'''"
		public Keyword getApostropheApostropheApostropheKeyword_0_1() { return cApostropheApostropheApostropheKeyword_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0() { return cValueSTRINGTerminalRuleCall_0_2_0; }
		
		//"'''"
		public Keyword getApostropheApostropheApostropheKeyword_0_3() { return cApostropheApostropheApostropheKeyword_0_3; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{IntConstant} value=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntConstant}
		public Action getIntConstantAction_2_0() { return cIntConstantAction_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_3_0() { return cBoolConstantAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//{This} 'this'
		public Group getGroup_4() { return cGroup_4; }
		
		//{This}
		public Action getThisAction_4_0() { return cThisAction_4_0; }
		
		//'this'
		public Keyword getThisKeyword_4_1() { return cThisKeyword_4_1; }
		
		//{Super} 'super'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Super}
		public Action getSuperAction_5_0() { return cSuperAction_5_0; }
		
		//'super'
		public Keyword getSuperKeyword_5_1() { return cSuperKeyword_5_1; }
		
		//{Null} 'null'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Null}
		public Action getNullAction_6_0() { return cNullAction_6_0; }
		
		//'null'
		public Keyword getNullKeyword_6_1() { return cNullKeyword_6_1; }
		
		//{NewObject} 'new' type=[Clazz] => '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{NewObject}
		public Action getNewObjectAction_7_0() { return cNewObjectAction_7_0; }
		
		//'new'
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }
		
		//type=[Clazz]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }
		
		//[Clazz]
		public CrossReference getTypeClazzCrossReference_7_2_0() { return cTypeClazzCrossReference_7_2_0; }
		
		//ID
		public RuleCall getTypeClazzIDTerminalRuleCall_7_2_0_1() { return cTypeClazzIDTerminalRuleCall_7_2_0_1; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//args+=Expression
		public Assignment getArgsAssignment_7_4_0() { return cArgsAssignment_7_4_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_7_4_0_0() { return cArgsExpressionParserRuleCall_7_4_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_7_4_1() { return cGroup_7_4_1; }
		
		//','
		public Keyword getCommaKeyword_7_4_1_0() { return cCommaKeyword_7_4_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_7_4_1_1() { return cArgsAssignment_7_4_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_7_4_1_1_0() { return cArgsExpressionParserRuleCall_7_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
		
		//{NewArray} 'new' type=TypeRef => '[' size=Expression ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//{NewArray}
		public Action getNewArrayAction_8_0() { return cNewArrayAction_8_0; }
		
		//'new'
		public Keyword getNewKeyword_8_1() { return cNewKeyword_8_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_8_2() { return cTypeAssignment_8_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_8_2_0() { return cTypeTypeRefParserRuleCall_8_2_0; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_8_3() { return cLeftSquareBracketKeyword_8_3; }
		
		//size=Expression
		public Assignment getSizeAssignment_8_4() { return cSizeAssignment_8_4; }
		
		//Expression
		public RuleCall getSizeExpressionParserRuleCall_8_4_0() { return cSizeExpressionParserRuleCall_8_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_5() { return cRightSquareBracketKeyword_8_5; }
		
		//{SymbolRef} symbol=[Symbol]
		public Group getGroup_9() { return cGroup_9; }
		
		//{SymbolRef}
		public Action getSymbolRefAction_9_0() { return cSymbolRefAction_9_0; }
		
		//symbol=[Symbol]
		public Assignment getSymbolAssignment_9_1() { return cSymbolAssignment_9_1; }
		
		//[Symbol]
		public CrossReference getSymbolSymbolCrossReference_9_1_0() { return cSymbolSymbolCrossReference_9_1_0; }
		
		//ID
		public RuleCall getSymbolSymbolIDTerminalRuleCall_9_1_0_1() { return cSymbolSymbolIDTerminalRuleCall_9_1_0_1; }
	}
	
	public class AccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.minijava.xtext.MiniJava.AccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUBLICPublicKeyword_2_0 = (Keyword)cPUBLICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccessLevel:
		//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
		public EnumRule getRule() { return rule; }
		
		//PRIVATE='private' | PROTECTED='protected' | PUBLIC='public'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_2() { return cPUBLICEnumLiteralDeclaration_2; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_2_0() { return cPUBLICPublicKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final ImportElements pImport;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TypeDeclarationElements pTypeDeclaration;
	private final ClazzElements pClazz;
	private final InterfaceElements pInterface;
	private final MemberElements pMember;
	private final MethodElements pMethod;
	private final ParameterElements pParameter;
	private final FieldElements pField;
	private final AccessLevelElements eAccessLevel;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final PrintStatementElements pPrintStatement;
	private final ReturnElements pReturn;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final TypeRefElements pTypeRef;
	private final SingleTypeRefElements pSingleTypeRef;
	private final ClassRefElements pClassRef;
	private final NamedElementElements pNamedElement;
	private final TypedDeclarationElements pTypedDeclaration;
	private final SymbolElements pSymbol;
	private final VariableDeclarationElements pVariableDeclaration;
	private final AssignmentElements pAssignment;
	private final AssigneeElements pAssignee;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final ModuloElements pModulo;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final ArrayAccessElements pArrayAccess;
	private final ArrayLengthElements pArrayLength;
	private final PrimaryElements pPrimary;
	private final SelectionExpressionElements pSelectionExpression;
	private final TerminalExpressionElements pTerminalExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniJavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pImport = new ImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pClazz = new ClazzElements();
		this.pInterface = new InterfaceElements();
		this.pMember = new MemberElements();
		this.pMethod = new MethodElements();
		this.pParameter = new ParameterElements();
		this.pField = new FieldElements();
		this.eAccessLevel = new AccessLevelElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pPrintStatement = new PrintStatementElements();
		this.pReturn = new ReturnElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pTypeRef = new TypeRefElements();
		this.pSingleTypeRef = new SingleTypeRefElements();
		this.pClassRef = new ClassRefElements();
		this.pNamedElement = new NamedElementElements();
		this.pTypedDeclaration = new TypedDeclarationElements();
		this.pSymbol = new SymbolElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pAssignment = new AssignmentElements();
		this.pAssignee = new AssigneeElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pModulo = new ModuloElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pArrayAccess = new ArrayAccessElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pPrimary = new PrimaryElements();
		this.pSelectionExpression = new SelectionExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tetrabox.minijava.xtext.MiniJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	('package' name=QualifiedName ';')?
	//	imports+=Import*
	//	classes+=TypeDeclaration*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//TypeDeclaration:
	//	Clazz | Interface;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//Clazz:
	//	accessLevel=AccessLevel? isabstract?='abstract'? 'class' name=ID ('extends' superClass=[Clazz|QualifiedName])?
	//	('implements' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)? '{'
	//	members+=Member*
	//	'}';
	public ClazzElements getClazzAccess() {
		return pClazz;
	}
	
	public ParserRule getClazzRule() {
		return getClazzAccess().getRule();
	}
	
	//Interface:
	//	accessLevel=AccessLevel? 'interface' name=ID ('extends' implementz+=[Interface|QualifiedName] (','
	//	implementz+=[Interface|QualifiedName])*)? '{'
	//	members+=Member*
	//	'}';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Member:
	//	Field | Method;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Method:
	//	access=AccessLevel? isabstract?='abstract'? isstatic?='static'? typeRef=TypeRef name=ID?
	//	'(' (params+=Parameter (',' params+=Parameter)*)? ')' (body=Block | ';');
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Parameter:
	//	typeRef=TypeRef name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Field:
	//	access=AccessLevel? typeRef=TypeRef name=ID ('=' defaultValue=Expression)? ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//enum AccessLevel:
	//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
	public AccessLevelElements getAccessLevelAccess() {
		return eAccessLevel;
	}
	
	public EnumRule getAccessLevelRule() {
		return getAccessLevelAccess().getRule();
	}
	
	//Block:
	//	{Block} '{' statements+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	Return ';' |
	//	=> Assignment ';' | IfStatement | WhileStatement | ForStatement | PrintStatement ";" | Block | SelectionExpression
	//	';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//PrintStatement:
	//	"System" "." "out" "." "println" "(" expression=Expression ")";
	public PrintStatementElements getPrintStatementAccess() {
		return pPrintStatement;
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//Return:
	//	'return' expression=Expression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' expression=Expression ')' thenBlock=Block (=> 'else' elseBlock=Block)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' '(' condition=Expression ')' block=Block;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' '(' declaration=Assignment ';' condition=Expression ';' progression=Assignment ')' block=Block;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//TypeRef:
	//	SingleTypeRef ({ArrayTypeRef.typeRef=current} '[' ']')?;
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//SingleTypeRef:
	//	ClassRef | {IntegerTypeRef} 'int' | {BooleanTypeRef} 'boolean' | {StringTypeRef} 'String' | {VoidTypeRef} 'void';
	public SingleTypeRefElements getSingleTypeRefAccess() {
		return pSingleTypeRef;
	}
	
	public ParserRule getSingleTypeRefRule() {
		return getSingleTypeRefAccess().getRule();
	}
	
	//ClassRef:
	//	referencedClass=[TypeDeclaration|QualifiedName];
	public ClassRefElements getClassRefAccess() {
		return pClassRef;
	}
	
	public ParserRule getClassRefRule() {
		return getClassRefAccess().getRule();
	}
	
	//NamedElement:
	//	TypedDeclaration | TypeDeclaration;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//TypedDeclaration:
	//	Symbol | Member;
	public TypedDeclarationElements getTypedDeclarationAccess() {
		return pTypedDeclaration;
	}
	
	public ParserRule getTypedDeclarationRule() {
		return getTypedDeclarationAccess().getRule();
	}
	
	//// here we need to set up an artificial priority with =>
	//Symbol:
	//	=> Parameter | VariableDeclaration;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//VariableDeclaration:
	//	typeRef=TypeRef name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Assignment:
	//	assignee=Assignee '=' value=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Assignee:
	//	=> ArrayAccess | VariableDeclaration;
	public AssigneeElements getAssigneeAccess() {
		return pAssignee;
	}
	
	public ParserRule getAssigneeRule() {
		return getAssigneeAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or returns Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns Expression:
	//	Comparison (({Equality.left=current} "==" | {Inequality.left=current} "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns Expression:
	//	Modulo (({SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
	//	{Inferior.left=current} "<") right=Modulo)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Modulo returns Expression:
	//	PlusOrMinus ({Modulo.left=current} "%" right=PlusOrMinus)*;
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//PlusOrMinus returns Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv returns Expression:
	//	ArrayAccess (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ArrayAccess)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//ArrayAccess returns Expression:
	//	ArrayLength ({ArrayAccess.object=current} '[' index=Expression ']')?;
	public ArrayAccessElements getArrayAccessAccess() {
		return pArrayAccess;
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}
	
	//ArrayLength returns Expression:
	//	Primary ({ArrayLength.array=current} '.' 'length')?;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//Primary returns Expression:
	//	'(' Expression ')' | {Not} => "!" expression=Primary | {Neg} => "-" expression=Primary | SelectionExpression;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//SelectionExpression returns Expression:
	//	TerminalExpression ({FieldAccess.receiver=current} '.' field=[Field] | {MethodCall.receiver=current} '.'
	//	method=[Method]
	//	'(' (args+=Expression (',' args+=Expression)*)? ')')*;
	public SelectionExpressionElements getSelectionExpressionAccess() {
		return pSelectionExpression;
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}
	
	//TerminalExpression returns Expression:
	//	{NativeExpression} "'''" value=STRING "'''" | {StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant}
	//	value=('true' | 'false') | {This} 'this' | {Super} 'super' | {Null} 'null' | {NewObject} 'new' type=[Clazz] => '('
	//	(args+=Expression (',' args+=Expression)*)? ')' | {NewArray} 'new' type=TypeRef => '[' size=Expression ']' |
	//	{SymbolRef} symbol=[Symbol];
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
