/**
 * generated by Xtext 2.10.0
 */
package org.tetrabox.minijava.xtext.validation;

import com.google.common.base.Objects;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.tetrabox.minijava.xtext.MiniJavaModelUtil;
import org.tetrabox.minijava.xtext.miniJava.AccessLevel;
import org.tetrabox.minijava.xtext.miniJava.Block;
import org.tetrabox.minijava.xtext.miniJava.ClassRef;
import org.tetrabox.minijava.xtext.miniJava.Clazz;
import org.tetrabox.minijava.xtext.miniJava.Expression;
import org.tetrabox.minijava.xtext.miniJava.Field;
import org.tetrabox.minijava.xtext.miniJava.FieldAccess;
import org.tetrabox.minijava.xtext.miniJava.Interface;
import org.tetrabox.minijava.xtext.miniJava.Member;
import org.tetrabox.minijava.xtext.miniJava.Method;
import org.tetrabox.minijava.xtext.miniJava.MethodCall;
import org.tetrabox.minijava.xtext.miniJava.MiniJavaPackage;
import org.tetrabox.minijava.xtext.miniJava.NamedElement;
import org.tetrabox.minijava.xtext.miniJava.NewObject;
import org.tetrabox.minijava.xtext.miniJava.Parameter;
import org.tetrabox.minijava.xtext.miniJava.Program;
import org.tetrabox.minijava.xtext.miniJava.Return;
import org.tetrabox.minijava.xtext.miniJava.Statement;
import org.tetrabox.minijava.xtext.miniJava.Super;
import org.tetrabox.minijava.xtext.miniJava.TypeDeclaration;
import org.tetrabox.minijava.xtext.miniJava.TypeRef;
import org.tetrabox.minijava.xtext.miniJava.VariableDeclaration;
import org.tetrabox.minijava.xtext.scoping.MiniJavaIndex;
import org.tetrabox.minijava.xtext.typing.MiniJavaTypeComputer;
import org.tetrabox.minijava.xtext.typing.MiniJavaTypeConformance;
import org.tetrabox.minijava.xtext.validation.AbstractMiniJavaValidator;
import org.tetrabox.minijava.xtext.validation.MiniJavaAccessibility;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MiniJavaValidator extends AbstractMiniJavaValidator {
  protected final static String ISSUE_CODE_PREFIX = "org.tetrabox.minijava.xtext.";
  
  public final static String HIERARCHY_CYCLE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "HierarchyCycle");
  
  public final static String FIELD_SELECTION_ON_METHOD = (MiniJavaValidator.ISSUE_CODE_PREFIX + "FieldSelectionOnMethod");
  
  public final static String METHOD_INVOCATION_ON_FIELD = (MiniJavaValidator.ISSUE_CODE_PREFIX + "MethodInvocationOnField");
  
  public final static String UNREACHABLE_CODE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "UnreachableCode");
  
  public final static String MISSING_FINAL_RETURN = (MiniJavaValidator.ISSUE_CODE_PREFIX + "MissingFinalReturn");
  
  public final static String EXTRA_FINAL_RETURN = (MiniJavaValidator.ISSUE_CODE_PREFIX + "ExtraFinalReturn");
  
  public final static String DUPLICATE_ELEMENT = (MiniJavaValidator.ISSUE_CODE_PREFIX + "DuplicateElement");
  
  public final static String INCOMPATIBLE_TYPES = (MiniJavaValidator.ISSUE_CODE_PREFIX + "IncompatibleTypes");
  
  public final static String INVALID_ARGS = (MiniJavaValidator.ISSUE_CODE_PREFIX + "InvalidArgs");
  
  public final static String WRONG_METHOD_OVERRIDE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "WrongMethodOverride");
  
  public final static String MEMBER_NOT_ACCESSIBLE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "MemberNotAccessible");
  
  public final static String DUPLICATE_CLASS = (MiniJavaValidator.ISSUE_CODE_PREFIX + "DuplicateClass");
  
  public final static String WRONG_SUPER_USAGE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "WrongSuperUsage");
  
  public final static String REDUCED_ACCESSIBILITY = (MiniJavaValidator.ISSUE_CODE_PREFIX + "ReducedAccessibility");
  
  public final static String ABSTRACT_METHOD_BODY = (MiniJavaValidator.ISSUE_CODE_PREFIX + "AbstractMethodBody");
  
  public final static String ABSTRACT_METHOD_CLASS = (MiniJavaValidator.ISSUE_CODE_PREFIX + "AbstractMethodClass");
  
  public final static String CONSTRUCTOR_CLASS = (MiniJavaValidator.ISSUE_CODE_PREFIX + "ConstructorClass");
  
  public final static String CONSTRUCTOR_ABSTRACT = (MiniJavaValidator.ISSUE_CODE_PREFIX + "ConstructorAbstract");
  
  public final static String INTERFACE_MEMBERS = (MiniJavaValidator.ISSUE_CODE_PREFIX + "InterfaceMembers");
  
  public final static String INTERFACE_SUPERTYPE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "InterfaceSuperType");
  
  public final static String CLASS_SUPERTYPE = (MiniJavaValidator.ISSUE_CODE_PREFIX + "ClassSuperType");
  
  @Inject
  @Extension
  private MiniJavaModelUtil _miniJavaModelUtil;
  
  @Inject
  @Extension
  private MiniJavaTypeComputer _miniJavaTypeComputer;
  
  @Inject
  @Extension
  private MiniJavaTypeConformance _miniJavaTypeConformance;
  
  @Inject
  @Extension
  private MiniJavaAccessibility _miniJavaAccessibility;
  
  @Inject
  @Extension
  private MiniJavaIndex _miniJavaIndex;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Check
  public void checkClassHierarchy(final TypeDeclaration c) {
    boolean _contains = this._miniJavaModelUtil.classHierarchy(c).contains(c);
    if (_contains) {
      String _name = c.getName();
      String _plus = ("Cycle in hierarchy of class \'" + _name);
      String _plus_1 = (_plus + "\'.");
      this.error(_plus_1, MiniJavaPackage.eINSTANCE.getNamedElement_Name(), 
        MiniJavaValidator.HIERARCHY_CYCLE, c.getName());
    }
  }
  
  public boolean isAnImplementionOf(final Method m1, final Method m2) {
    EObject _eContainer = m1.eContainer();
    final Clazz c = ((Clazz) _eContainer);
    EObject _eContainer_1 = m2.eContainer();
    final TypeDeclaration t = ((TypeDeclaration) _eContainer_1);
    final boolean conforms = this._miniJavaTypeConformance.isConformant(c, t);
    final boolean returnConforms = this._miniJavaTypeConformance.isConformant(this._miniJavaTypeComputer.getType(m1.getTypeRef()), this._miniJavaTypeComputer.getType(m2.getTypeRef()));
    final Function1<Parameter, TypeRef> _function = (Parameter it) -> {
      return it.getTypeRef();
    };
    final Function1<TypeRef, TypeDeclaration> _function_1 = (TypeRef it) -> {
      return this._miniJavaTypeComputer.getType(it);
    };
    final List<TypeDeclaration> m1paramtypes = ListExtensions.<TypeRef, TypeDeclaration>map(ListExtensions.<Parameter, TypeRef>map(m1.getParams(), _function), _function_1);
    final Function1<Parameter, TypeRef> _function_2 = (Parameter it) -> {
      return it.getTypeRef();
    };
    final Function1<TypeRef, TypeDeclaration> _function_3 = (TypeRef it) -> {
      return this._miniJavaTypeComputer.getType(it);
    };
    final List<TypeDeclaration> m2paramtypes = ListExtensions.<TypeRef, TypeDeclaration>map(ListExtensions.<Parameter, TypeRef>map(m2.getParams(), _function_2), _function_3);
    return (((conforms && Objects.equal(m1.getName(), m2.getName())) && returnConforms) && IterableExtensions.elementsEqual(m1paramtypes, m2paramtypes));
  }
  
  @Check
  public void checkAllMethodsImplemented(final Clazz c) {
    boolean _isIsabstract = c.isIsabstract();
    boolean _not = (!_isIsabstract);
    if (_not) {
      final HashSet<Method> nonAbstract = new HashSet<Method>();
      final Function1<Method, Boolean> _function = (Method it) -> {
        boolean _isIsabstract_1 = it.isIsabstract();
        return Boolean.valueOf((!_isIsabstract_1));
      };
      Iterables.<Method>addAll(nonAbstract, IterableExtensions.<Method>filter(this._miniJavaModelUtil.methods(c), _function));
      final HashSet<Method> abstract_ = new HashSet<Method>();
      final Set<TypeDeclaration> visited = CollectionLiterals.<TypeDeclaration>newLinkedHashSet();
      final Set<TypeDeclaration> current = this._miniJavaModelUtil.getSuperTypes(c);
      while ((!current.isEmpty())) {
        {
          final Function1<TypeDeclaration, EList<Member>> _function_1 = (TypeDeclaration it) -> {
            return it.getMembers();
          };
          final Set<Method> superTypesMethods = IterableExtensions.<Method>toSet(Iterables.<Method>filter(Iterables.<Member>concat(IterableExtensions.<TypeDeclaration, EList<Member>>map(current, _function_1)), Method.class));
          final Function1<Method, Boolean> _function_2 = (Method it) -> {
            return Boolean.valueOf((it.isIsabstract() || (it.eContainer() instanceof Interface)));
          };
          final Map<Boolean, List<Method>> sorting = IterableExtensions.<Boolean, Method>groupBy(superTypesMethods, _function_2);
          Set<Method> _xifexpression = null;
          boolean _containsKey = sorting.containsKey(Boolean.valueOf(true));
          if (_containsKey) {
            _xifexpression = IterableExtensions.<Method>toSet(sorting.get(Boolean.valueOf(true)));
          } else {
            _xifexpression = Collections.<Method>unmodifiableSet(CollectionLiterals.<Method>newHashSet());
          }
          final Set<Method> superTypeAbstractMethods = _xifexpression;
          Set<Method> _xifexpression_1 = null;
          boolean _containsKey_1 = sorting.containsKey(Boolean.valueOf(false));
          if (_containsKey_1) {
            _xifexpression_1 = IterableExtensions.<Method>toSet(sorting.get(Boolean.valueOf(false)));
          } else {
            _xifexpression_1 = Collections.<Method>unmodifiableSet(CollectionLiterals.<Method>newHashSet());
          }
          final Set<Method> superTypeNonAbstractMethods = _xifexpression_1;
          nonAbstract.addAll(superTypeNonAbstractMethods);
          abstract_.addAll(superTypeAbstractMethods);
          visited.addAll(current);
          final LinkedHashSet<TypeDeclaration> copy = CollectionLiterals.<TypeDeclaration>newLinkedHashSet();
          copy.addAll(current);
          current.clear();
          final Function1<TypeDeclaration, Set<TypeDeclaration>> _function_3 = (TypeDeclaration it) -> {
            return this._miniJavaModelUtil.getSuperTypes(it);
          };
          final Function1<TypeDeclaration, Boolean> _function_4 = (TypeDeclaration it) -> {
            boolean _contains = visited.contains(it);
            return Boolean.valueOf((!_contains));
          };
          Iterables.<TypeDeclaration>addAll(current, IterableExtensions.<TypeDeclaration>filter(Iterables.<TypeDeclaration>concat(IterableExtensions.<TypeDeclaration, Set<TypeDeclaration>>map(copy, _function_3)), _function_4));
        }
      }
      final Function1<Method, Boolean> _function_1 = (Method a) -> {
        final Function1<Method, Boolean> _function_2 = (Method na) -> {
          return Boolean.valueOf(this.isAnImplementionOf(na, a));
        };
        boolean _exists = IterableExtensions.<Method>exists(nonAbstract, _function_2);
        return Boolean.valueOf((!_exists));
      };
      boolean _exists = IterableExtensions.<Method>exists(abstract_, _function_1);
      if (_exists) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("All abstract methods must be implemented, or the class must be made abstract.");
        this.error(_builder.toString(), c, 
          MiniJavaPackage.eINSTANCE.getClazz_SuperClass(), MiniJavaValidator.ABSTRACT_METHOD_CLASS);
      }
    }
  }
  
  @Check
  public void checkUnreachableCode(final Block block) {
    final EList<Statement> statements = block.getStatements();
    for (int i = 0; (i < (((Object[])Conversions.unwrapArray(statements, Object.class)).length - 1)); i++) {
      Statement _get = statements.get(i);
      if ((_get instanceof Return)) {
        this.error("Unreachable code", statements.get((i + 1)), null, 
          MiniJavaValidator.UNREACHABLE_CODE);
        return;
      }
    }
  }
  
  @Check
  public void checkReturn(final Method method) {
    String _name = method.getName();
    boolean _tripleNotEquals = (_name != null);
    if (_tripleNotEquals) {
      EClass _eClass = method.getTypeRef().eClass();
      EClass _voidTypeRef = MiniJavaPackage.eINSTANCE.getVoidTypeRef();
      boolean _tripleNotEquals_1 = (_eClass != _voidTypeRef);
      if (_tripleNotEquals_1) {
        Return _returnStatement = this._miniJavaModelUtil.returnStatement(method);
        boolean _tripleEquals = (_returnStatement == null);
        if (_tripleEquals) {
          this.error(
            "Method must end with a return statement", 
            MiniJavaPackage.eINSTANCE.getMethod_Body(), 
            MiniJavaValidator.MISSING_FINAL_RETURN);
        }
      } else {
        Return _returnStatement_1 = this._miniJavaModelUtil.returnStatement(method);
        boolean _tripleNotEquals_2 = (_returnStatement_1 != null);
        if (_tripleNotEquals_2) {
          this.error(
            "Void method must not end with a return statement", 
            MiniJavaPackage.eINSTANCE.getMethod_Body(), 
            MiniJavaValidator.EXTRA_FINAL_RETURN);
        }
      }
    }
  }
  
  @Check
  public void checkNoDuplicateClasses(final Program p) {
    this.checkNoDuplicateElements(p.getClasses(), "class");
  }
  
  @Check
  public void checkNoDuplicateMembers(final Clazz c) {
    this.checkNoDuplicateElements(this._miniJavaModelUtil.fields(c), "field");
    final Function1<Method, Boolean> _function = (Method it) -> {
      String _name = it.getName();
      return Boolean.valueOf((_name != null));
    };
    this.checkNoDuplicateElements(IterableExtensions.<Method>filter(this._miniJavaModelUtil.methods(c), _function), "method");
  }
  
  @Check
  public void checkNoDuplicateSymbols(final Method m) {
    this.checkNoDuplicateElements(m.getParams(), "parameter");
    this.checkNoDuplicateElements(EcoreUtil2.<VariableDeclaration>getAllContentsOfType(m.getBody(), VariableDeclaration.class), "variable");
  }
  
  @Check
  public void checkConformance(final Expression exp) {
    final TypeDeclaration actualType = this._miniJavaTypeComputer.typeFor(exp);
    final TypeDeclaration expectedType = this._miniJavaTypeComputer.expectedType(exp);
    if (((expectedType == null) || (actualType == null))) {
      return;
    }
    boolean _isConformant = this._miniJavaTypeConformance.isConformant(actualType, expectedType);
    boolean _not = (!_isConformant);
    if (_not) {
      String _name = expectedType.getName();
      String _plus = ("Incompatible types. Expected \'" + _name);
      String _plus_1 = (_plus + "\' but was \'");
      String _name_1 = actualType.getName();
      String _plus_2 = (_plus_1 + _name_1);
      String _plus_3 = (_plus_2 + "\'");
      this.error(_plus_3, null, 
        MiniJavaValidator.INCOMPATIBLE_TYPES);
    }
  }
  
  @Check
  public void checkMethodInvocationArguments(final MethodCall sel) {
    final Method method = sel.getMethod();
    int _size = method.getParams().size();
    int _size_1 = sel.getArgs().size();
    boolean _notEquals = (_size != _size_1);
    if (_notEquals) {
      int _size_2 = method.getParams().size();
      String _plus = ("Invalid number of arguments: expected " + Integer.valueOf(_size_2));
      String _plus_1 = (_plus + " but was ");
      int _size_3 = sel.getArgs().size();
      String _plus_2 = (_plus_1 + Integer.valueOf(_size_3));
      this.error(_plus_2, 
        MiniJavaPackage.eINSTANCE.getMethodCall_Method(), MiniJavaValidator.INVALID_ARGS);
    }
  }
  
  @Check
  public void checkConstructorAbstractClass(final NewObject n) {
    boolean _isIsabstract = n.getType().isIsabstract();
    if (_isIsabstract) {
      this.error("Cannot construct an instance of an abstract class.", MiniJavaPackage.eINSTANCE.getNewObject_Type(), 
        MiniJavaValidator.CONSTRUCTOR_ABSTRACT);
    }
  }
  
  @Check
  public void checkMethodOverride(final Clazz c) {
    final Map<String, Method> hierarchyMethods = this._miniJavaModelUtil.classHierarchyMethods(c);
    Iterable<Method> _methods = this._miniJavaModelUtil.methods(c);
    for (final Method m : _methods) {
      {
        final Method overridden = hierarchyMethods.get(m.getName());
        if (((overridden != null) && ((!this._miniJavaTypeConformance.isConformant(this._miniJavaTypeComputer.getType(m.getTypeRef()), this._miniJavaTypeComputer.getType(overridden.getTypeRef()))) || (!IterableExtensions.elementsEqual(ListExtensions.<TypeRef, TypeDeclaration>map(ListExtensions.<Parameter, TypeRef>map(m.getParams(), ((Function1<Parameter, TypeRef>) (Parameter it) -> {
          return it.getTypeRef();
        })), ((Function1<TypeRef, TypeDeclaration>) (TypeRef it) -> {
          return this._miniJavaTypeComputer.getType(it);
        })), ListExtensions.<TypeRef, TypeDeclaration>map(ListExtensions.<Parameter, TypeRef>map(overridden.getParams(), ((Function1<Parameter, TypeRef>) (Parameter it) -> {
          return it.getTypeRef();
        })), ((Function1<TypeRef, TypeDeclaration>) (TypeRef it) -> {
          return this._miniJavaTypeComputer.getType(it);
        }))))))) {
          String _name = m.getName();
          String _plus = ("The method \'" + _name);
          String _plus_1 = (_plus + "\' must override a superclass method");
          this.error(_plus_1, m, 
            MiniJavaPackage.eINSTANCE.getNamedElement_Name(), MiniJavaValidator.WRONG_METHOD_OVERRIDE);
        } else {
          AccessLevel _access = m.getAccess();
          AccessLevel _access_1 = overridden.getAccess();
          boolean _lessThan = (_access.compareTo(_access_1) < 0);
          if (_lessThan) {
            AccessLevel _access_2 = overridden.getAccess();
            String _plus_2 = ("Cannot reduce access from " + _access_2);
            String _plus_3 = (_plus_2 + " to ");
            AccessLevel _access_3 = m.getAccess();
            String _plus_4 = (_plus_3 + _access_3);
            this.error(_plus_4, m, 
              MiniJavaPackage.eINSTANCE.getMember_Access(), MiniJavaValidator.REDUCED_ACCESSIBILITY);
          }
        }
      }
    }
  }
  
  public static boolean isAbstractOrInterface(final TypeDeclaration t) {
    if ((t instanceof Clazz)) {
      return ((Clazz)t).isIsabstract();
    } else {
      if ((t instanceof Interface)) {
        return true;
      }
    }
    return false;
  }
  
  @Check
  public void checkMethodAbstract(final Method method) {
    if ((method.isIsabstract() && (method.getBody() != null))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("The abstract method ");
      String _name = method.getName();
      _builder.append(_name);
      _builder.append(" cannot have a body.");
      this.error(_builder.toString(), method, 
        MiniJavaPackage.eINSTANCE.getMethod_Body(), MiniJavaValidator.ABSTRACT_METHOD_BODY);
    }
    if ((method.isIsabstract() && (!MiniJavaValidator.isAbstractOrInterface(((TypeDeclaration) method.eContainer()))))) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("The abstract method ");
      String _name_1 = method.getName();
      _builder_1.append(_name_1);
      _builder_1.append(" must be contained in an abstract class or in an interface.");
      this.error(_builder_1.toString(), method, MiniJavaPackage.eINSTANCE.getMethod_Isabstract(), MiniJavaValidator.ABSTRACT_METHOD_CLASS);
    }
  }
  
  @Check
  public void checkInterfaceMembers(final Interface i) {
    final Function1<Member, Boolean> _function = (Member it) -> {
      return Boolean.valueOf((it instanceof Field));
    };
    boolean _exists = IterableExtensions.<Member>exists(i.getMembers(), _function);
    if (_exists) {
      this.error("An interface cannot contain a field.", i, MiniJavaPackage.eINSTANCE.getTypeDeclaration_Members(), 
        MiniJavaValidator.INTERFACE_MEMBERS);
    }
  }
  
  @Check
  public void checkConstructor(final Method constructor) {
    String _name = constructor.getName();
    boolean _tripleEquals = (_name == null);
    if (_tripleEquals) {
      EObject _eContainer = constructor.eContainer();
      final Clazz parentClass = ((Clazz) _eContainer);
      TypeRef _typeRef = constructor.getTypeRef();
      TypeDeclaration _referencedClass = ((ClassRef) _typeRef).getReferencedClass();
      boolean _tripleNotEquals = (_referencedClass != parentClass);
      if (_tripleNotEquals) {
        this.error("A constructor must be in the same class as its name.", constructor, 
          MiniJavaPackage.eINSTANCE.getTypedDeclaration_TypeRef(), MiniJavaValidator.CONSTRUCTOR_CLASS);
      }
    }
  }
  
  @Check
  public void checkAccessibility(final FieldAccess sel) {
    final Field field = sel.getField();
    if (((field.getName() != null) && (!this._miniJavaAccessibility.isAccessibleFrom(field, sel)))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("The ");
      AccessLevel _access = field.getAccess();
      _builder.append(_access);
      _builder.append(" member ");
      String _name = field.getName();
      _builder.append(_name);
      _builder.append(" is not accessible here");
      this.error(_builder.toString(), 
        MiniJavaPackage.eINSTANCE.getFieldAccess_Field(), 
        MiniJavaValidator.MEMBER_NOT_ACCESSIBLE);
    }
  }
  
  @Check
  public void checkAccessibility(final MethodCall sel) {
    final Method method = sel.getMethod();
    if (((method.getName() != null) && (!this._miniJavaAccessibility.isAccessibleFrom(method, sel)))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("The ");
      AccessLevel _access = method.getAccess();
      _builder.append(_access);
      _builder.append(" member ");
      String _name = method.getName();
      _builder.append(_name);
      _builder.append(" is not accessible here");
      this.error(_builder.toString(), 
        MiniJavaPackage.eINSTANCE.getMethodCall_Method(), 
        MiniJavaValidator.MEMBER_NOT_ACCESSIBLE);
    }
  }
  
  @Check
  public void checkAccessibility(final NewObject n) {
    final Function1<Method, Boolean> _function = (Method it) -> {
      return Boolean.valueOf(((it.getName() == null) && (it.getParams().size() == n.getArgs().size())));
    };
    final Method constructor = IterableExtensions.<Method>findFirst(Iterables.<Method>filter(n.getType().getMembers(), Method.class), _function);
    boolean _isAccessibleFrom = this._miniJavaAccessibility.isAccessibleFrom(constructor, n);
    boolean _not = (!_isAccessibleFrom);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("This constructor is not accessible here.");
      this.error(_builder.toString(), 
        MiniJavaPackage.eINSTANCE.getNewObject_Type(), 
        MiniJavaValidator.MEMBER_NOT_ACCESSIBLE);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void checkDuplicateClassesInFiles(final Program p) {
    final Map<QualifiedName, IEObjectDescription> externalClasses = this._miniJavaIndex.getVisibleExternalClassesDescriptions(p);
    EList<TypeDeclaration> _classes = p.getClasses();
    for (final TypeDeclaration c : _classes) {
      {
        final QualifiedName className = this._iQualifiedNameProvider.getFullyQualifiedName(c);
        boolean _containsKey = externalClasses.containsKey(className);
        if (_containsKey) {
          String _name = c.getName();
          String _plus = ("The type " + _name);
          String _plus_1 = (_plus + " is already defined");
          this.error(_plus_1, c, MiniJavaPackage.eINSTANCE.getNamedElement_Name(), 
            MiniJavaValidator.DUPLICATE_CLASS);
        }
      }
    }
  }
  
  @Check
  public void checkSuper(final Super s) {
    if (((!Objects.equal(s.eContainingFeature(), MiniJavaPackage.eINSTANCE.getMethodCall_Receiver())) && 
      (!Objects.equal(s.eContainingFeature(), MiniJavaPackage.eINSTANCE.getFieldAccess_Receiver())))) {
      this.error("\'super\' can be used only as member selection receiver", null, MiniJavaValidator.WRONG_SUPER_USAGE);
    }
  }
  
  private void checkNoDuplicateElements(final Iterable<? extends NamedElement> elements, final String desc) {
    final HashMultimap<String, NamedElement> multiMap = HashMultimap.<String, NamedElement>create();
    for (final NamedElement e : elements) {
      multiMap.put(e.getName(), e);
    }
    Set<Map.Entry<String, Collection<NamedElement>>> _entrySet = multiMap.asMap().entrySet();
    for (final Map.Entry<String, Collection<NamedElement>> entry : _entrySet) {
      {
        final Collection<NamedElement> duplicates = entry.getValue();
        int _size = duplicates.size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          for (final NamedElement d : duplicates) {
            String _name = d.getName();
            String _plus = ((("Duplicate " + desc) + " \'") + _name);
            String _plus_1 = (_plus + "\'");
            this.error(_plus_1, d, MiniJavaPackage.eINSTANCE.getNamedElement_Name(), 
              MiniJavaValidator.DUPLICATE_ELEMENT);
          }
        }
      }
    }
  }
}
