/*
 * generated by Xtext 2.14.0
 */
package fr.inria.diverse.ale.repl.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import fr.inria.diverse.ale.repl.visitor2repl.REPL
import fr.inria.diverse.ale.repl.visitor2repl.Instruction

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class Visitor2replProposalProvider extends AbstractVisitor2replProposalProvider {
	
	override completeInstruction_EvalParams(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		this.acceptExpressions(model, acceptor, context)
		super.completeInstruction_EvalParams(model, assignment, context, acceptor)
	}

	
	override completeInstruction_EvalResult(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		this.acceptExpressions(model, acceptor, context)
		super.completeInstruction_EvalResult(model, assignment, context, acceptor)
	}

	
	def acceptExpressions(EObject model, ICompletionProposalAcceptor acceptor,
		ContentAssistContext context) {
		acceptor.accept(createCompletionProposal("self", context))
		acceptor.accept(createCompletionProposal("output", context))
		
		var container = model
		while (container !== null) {
			if (container instanceof Instruction) {
				(container as Instruction).attributes.forEach[
					acceptor.accept(createCompletionProposal("self." + it.name, context))	
				]
			}
			if (container instanceof REPL) {
				val interpreter = (container as REPL).interpreter		
				acceptor.accept(createCompletionProposal(interpreter.name, context))
				interpreter.attributes.forEach[
					acceptor.accept(createCompletionProposal(interpreter.name + "." + it.name, context))	
				]
			}
			container = container.eContainer
		}
	}
	
}
